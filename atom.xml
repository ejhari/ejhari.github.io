<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[My Octopress Blog]]></title>
  <link href="http://ejhari.github.io/atom.xml" rel="self"/>
  <link href="http://ejhari.github.io/"/>
  <updated>2015-03-20T04:00:18+05:30</updated>
  <id>http://ejhari.github.io/</id>
  <author>
    <name><![CDATA[Your Name]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Translating C Constructs to MSP430 Assembly Code]]></title>
    <link href="http://ejhari.github.io/blog/2010/11/25/translating-c-constructs-to-msp430/"/>
    <updated>2010-11-25T21:44:00+05:30</updated>
    <id>http://ejhari.github.io/blog/2010/11/25/translating-c-constructs-to-msp430</id>
    <content type="html"><![CDATA[<b><u>Function and its Parameters</u></b><br /><br />The sample program is:<br /><table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto; text-align: center;"><tbody><tr><td style="text-align: center;"><a href="http://3.bp.blogspot.com/_rkBB8V8TgZY/TNKeILjvQOI/AAAAAAAAAVg/yVt5GpIdD0g/s1600/1.png" imageanchor="1" style="margin-left: auto; margin-right: auto;"><img border="0" height="188" src="http://3.bp.blogspot.com/_rkBB8V8TgZY/TNKeILjvQOI/AAAAAAAAAVg/yVt5GpIdD0g/s320/1.png" width="320" /></a></td></tr></tbody></table>When a function is called, some housekeeping is normally done which appears as the function&#8217;s <b>prologue</b> in the assembly code (this would not be true if the function is declared with the attribute &#8221;<b>naked</b>&#8221;).<br /><br />The procedure is:<br />1. The current value of r4 (used as <b>frame pointer</b> in MSP430 family) is pushed<br />&nbsp;&nbsp; &nbsp;into&nbsp;the stack. The <b>stack pointer</b> (r1) automatically gets decremented by 2.<br />2. r1 gets decremented again by an offset, thus allocating a stack frame. The<br />&nbsp;&nbsp; &nbsp;offset by which r1 gets decremented depends on the number of local variables <br />&nbsp;&nbsp; &nbsp;in&nbsp;the called function.<br />&nbsp;&nbsp; &nbsp;Here, r1 gets decremented by 4, since there are two local variables for <i>fun()</i>, <i>a</i><br />&nbsp;&nbsp; &nbsp;and <i>b</i>.<br />3. The current value of the stack pointer r1 is copied into r4 (the register r4 thus<br />&nbsp;&nbsp; &nbsp;indicates the frame pointer for the currently executing function).<br />&nbsp;&nbsp; &nbsp;All further manipulations of the local variables will be with reference to the<br />&nbsp;&nbsp; &nbsp;frame pointer r4.<br />4. After the body of the called function is executed, the same offset as above is <br />&nbsp;&nbsp; &nbsp;added back to the stack pointer r1, thus deallocating the stack frame.<br />5. The current value of r1 is popped into r4, thus retrieving the previous stack<br />&nbsp;&nbsp; &nbsp;frame. The stack pointer r1 gets auto-incremented by 2.<br /><br /><div class="separator" style="clear: both; text-align: center;"><a href="http://4.bp.blogspot.com/_rkBB8V8TgZY/TNKbrn3am5I/AAAAAAAAAVc/5-J_ig58UNg/s1600/2.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" height="207" src="http://4.bp.blogspot.com/_rkBB8V8TgZY/TNKbrn3am5I/AAAAAAAAAVc/5-J_ig58UNg/s320/2.png" width="320" /></a></div><br />The assembler directives <b>__FrameSize</b> and <b>__FrameOffset</b> gives the size and offset of the frame allocated for the function <i>fun()</i>.<br /><br /><b><u>Pointers</u></b><br /><br />The sample program is:<br /><div class="separator" style="clear: both; text-align: center;"><a href="http://1.bp.blogspot.com/_rkBB8V8TgZY/TNKeRG7OhoI/AAAAAAAAAVk/8yfHLDO4QCo/s1600/41.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" height="138" src="http://1.bp.blogspot.com/_rkBB8V8TgZY/TNKeRG7OhoI/AAAAAAAAAVk/8yfHLDO4QCo/s320/41.png" width="320" /></a></div><br />On generating the corresponding assembly code:<br /><div class="separator" style="clear: both; text-align: center;"><a href="http://1.bp.blogspot.com/_rkBB8V8TgZY/TNKeaChDUbI/AAAAAAAAAVo/g4oHEuzXcHc/s1600/42.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" height="208" src="http://1.bp.blogspot.com/_rkBB8V8TgZY/TNKeaChDUbI/AAAAAAAAAVo/g4oHEuzXcHc/s320/42.png" width="320" /></a></div><br />The code can be traced as follows:<br />1. The number 10 is stored in the memory address which is at &nbsp;an offset of 2 bytes<br />&nbsp;&nbsp; &nbsp;from the location pointed to by the frame pointer r4.<br />2. The memory address of 10, i.e. the value of (r4 + 2), is stored in the memory<br />&nbsp;&nbsp; &nbsp;location pointed to by r4.<br />3. The data in the location pointed to by the register r4 is safely interpreted as<br />&nbsp;&nbsp; &nbsp;another memory address, and the number 20 is stored in this particular address.<br /><br />And you thought &#8220;pointers&#8221; were magic !!!<br /><br /><b><u>Variables</u></b><br /><br />The most simple case would be:<br /><div class="separator" style="clear: both; text-align: center;"><a href="http://4.bp.blogspot.com/_rkBB8V8TgZY/TNKeh3jbiLI/AAAAAAAAAVs/hMCt3nU7ky4/s1600/51.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" height="76" src="http://4.bp.blogspot.com/_rkBB8V8TgZY/TNKeh3jbiLI/AAAAAAAAAVs/hMCt3nU7ky4/s320/51.png" width="320" /></a></div><br />But on still expecting the prologue and epilogue:<br /><div class="separator" style="clear: both; text-align: center;"><a href="http://1.bp.blogspot.com/_rkBB8V8TgZY/TNKeqpCrXlI/AAAAAAAAAVw/sfoWJwmW4ok/s1600/52.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" height="139" src="http://1.bp.blogspot.com/_rkBB8V8TgZY/TNKeqpCrXlI/AAAAAAAAAVw/sfoWJwmW4ok/s320/52.png" width="320" /></a></div><br />The number 100 is stored in a memory location addressed with reference to the frame pointer r4.<br />The variable <i>i</i> is local to the function <i>main()</i> so no extra work.<br /><br /><b><u>Static Variables</u></b><br /><br />The demonstration will be like:<br /><div class="separator" style="clear: both; text-align: center;"><a href="http://2.bp.blogspot.com/_rkBB8V8TgZY/TNKezN8zsLI/AAAAAAAAAV0/V64Y22rG6LE/s1600/61.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" height="108" src="http://2.bp.blogspot.com/_rkBB8V8TgZY/TNKezN8zsLI/AAAAAAAAAV0/V64Y22rG6LE/s320/61.png" width="320" /></a></div><br />Wondering how the assembly code would look like:<br /><div class="separator" style="clear: both; text-align: center;"><a href="http://1.bp.blogspot.com/_rkBB8V8TgZY/TNKe4liLvAI/AAAAAAAAAV4/-9BBj0o-GlM/s1600/62.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" height="260" src="http://1.bp.blogspot.com/_rkBB8V8TgZY/TNKe4liLvAI/AAAAAAAAAV4/-9BBj0o-GlM/s320/62.png" width="320" /></a></div><br />The static integer 200 is stored in a similar way as above, but to a different address. Also this address (label i.1194) is located in the <b>.data section</b>, instead of the usual .text section.<br /><br />All global and static variables (which have their lifetime as long as the whole program), are stored in the .data section.<br /><br /><b><u>Pointers to Functions</u></b><br /><br />Considering the sample code:<br /><div class="separator" style="clear: both; text-align: center;"><a href="http://2.bp.blogspot.com/_rkBB8V8TgZY/TNKe-mHPZ4I/AAAAAAAAAV8/wq11Y33b8Gg/s1600/71.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" height="196" src="http://2.bp.blogspot.com/_rkBB8V8TgZY/TNKe-mHPZ4I/AAAAAAAAAV8/wq11Y33b8Gg/s320/71.png" width="320" /></a></div><br />A simple pointer to a function accepting void and returning void is created. It is assigned the memory address of the function <i>fun()</i>. Then this pointer to a function <i>f</i> is called.<br /><br />Awaiting the assembly code:<br /><div class="separator" style="clear: both; text-align: auto;">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<a href="http://1.bp.blogspot.com/_rkBB8V8TgZY/TNKfFHG_PfI/AAAAAAAAAWA/YyBhQKUBZ2Q/s1600/72.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" height="320" src="http://1.bp.blogspot.com/_rkBB8V8TgZY/TNKfFHG_PfI/AAAAAAAAAWA/YyBhQKUBZ2Q/s320/72.png" width="272" /></a></div><div class="separator" style="clear: both; text-align: auto;"><br /></div><div class="separator" style="clear: both; text-align: auto;">The pointer <i>f</i> is local to the function <i>main()</i>. Hence, a stack frame of size 2 is allocated, as expected. The value of <i>f</i>, i.e. the memory address of function <i>fun()</i>, is stored in the location pointed to by the frame pointer r4. This address is then simply passed to the <i>call</i> instruction.</div>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Arsenal of an Embedded System Programmer]]></title>
    <link href="http://ejhari.github.io/blog/2010/11/25/arsenal-of-embedded-system-programmer/"/>
    <updated>2010-11-25T16:44:00+05:30</updated>
    <id>http://ejhari.github.io/blog/2010/11/25/arsenal-of-embedded-system-programmer</id>
    <content type="html"><![CDATA[When confronting any new microcontroller or microprocessor or practicallly, a development board, there are some things to keep in mind before diving into the possibly arduous debugging session you are going to have with the system.<br /><br /><table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto; text-align: center;"><tbody><tr><td style="text-align: center;"><a href="http://3.bp.blogspot.com/_rkBB8V8TgZY/TO5EsT4DexI/AAAAAAAAAWY/HHPw_L71LOw/s1600/unix.jpg" imageanchor="1" style="margin-left: auto; margin-right: auto;"><img border="0" height="251" src="http://3.bp.blogspot.com/_rkBB8V8TgZY/TO5EsT4DexI/AAAAAAAAAWY/HHPw_L71LOw/s320/unix.jpg" width="320" /></a></td></tr><tr><td class="tr-caption" style="text-align: center;">Bits and more bits &#8230;</td></tr></tbody></table><b><u>The Rules</u></b><br />1. Never fully trust anything written before you, anywhere you may see it.<br />2. If you are forced to behave otherwise, go back to Rule 1.<br /><br /><b><u>The Programmer&#8217;s Model</u></b><br />&nbsp;&nbsp; &nbsp;You can&#8217;t possibly know everything about the interconnections, circuitry and other design specifications of the chip under concern and also the development board, when you work on it for the first time. But then, these factors aren&#8217;t really much of a concern. What you primarily need is something else.<br /><br />&nbsp;&nbsp; &nbsp;Even if you don&#8217;t know how the chip is built, you must know how you can control it, and also the features available at the higher level. You need to have a model of your own for the chip, called the Programmer&#8217;s Model. Through this model, you must be aware of the following:<br /><br />1. <b>Homework</b><br />&nbsp;&nbsp; &nbsp;Identify the manufacturer, family, type of device (value&nbsp;line, low/high density,<br />&nbsp;&nbsp; &nbsp;etc ..), and architecture (von&nbsp;Neumann, Harvard, etc ..).<br />&nbsp;&nbsp; &nbsp;Get the Family Manual, Device Specific Manual, and any&nbsp;other pdf that you may<br />&nbsp;&nbsp; &nbsp;find useful.<br />&nbsp;&nbsp; &nbsp;The manufacturer may also publish an errata sheet, which&nbsp;may become useful<br />&nbsp;&nbsp; &nbsp;in some rare cases.<br /><br />2. <b>Instruction set</b><br />&nbsp;&nbsp; &nbsp;Know whether the instructions are 16 or 32 bit. Be familiar&nbsp;with some common<br />&nbsp;&nbsp; &nbsp;instructions.<br />&nbsp;&nbsp; &nbsp;Understand the different addressing modes provided in the device.<br />&nbsp;&nbsp; &nbsp;Are the instructions aligned by &nbsp;2 or 4?<br />&nbsp;&nbsp; &nbsp;Does it suite more to a RISC or CISC style? &nbsp; <br /><br />3. <b>The Memory Map</b><br />&nbsp;&nbsp; &nbsp;Which are the memory areas for flash, RAM, interrupt&nbsp;vectors, peripheral<br />&nbsp;&nbsp; &nbsp;registers and special function registers&nbsp;(SFRs)?<br />&nbsp;&nbsp; &nbsp;Where is the starting location of stack stored? <br /><br />4. <b>Registers</b><br />&nbsp;&nbsp; &nbsp;Which are the General Purpose Registers, Program Counter,&nbsp;Status Register and<br />&nbsp;&nbsp; &nbsp;Special Function Registers?<br /><br />5. <b>The Vector Table</b><br />&nbsp;&nbsp; &nbsp;Where is the interrupt vector table present? Which&nbsp;interrupts do the vectors <br />&nbsp;&nbsp; &nbsp;represent in the table?<br />&nbsp;&nbsp; &nbsp;Which is the reset vector?<br /><br />6. <b>The Modules</b><br />&nbsp;&nbsp; &nbsp;Know the inbuilt modules in the package (ADC, Timer,&nbsp;USART, etc ..).<br />&nbsp;&nbsp; &nbsp;All the Control Word Registers needed and how to manipulate&nbsp;them, will be<br />&nbsp;&nbsp; &nbsp;usually specified in the Family Manual.<br /><br />7. <b>Modes of Operation</b><br />&nbsp;&nbsp; &nbsp;In some systems, the processor by itself may operate in&nbsp;different modes.<br />&nbsp;&nbsp; &nbsp;Also know about the various low power modes normally&nbsp;available for the system <br />&nbsp;&nbsp; &nbsp;as a whole.<br /><br />8. <b>The Runtime Framework</b><br />&nbsp;&nbsp; &nbsp;C is the normal choice for embedded programming.<br />&nbsp;&nbsp; &nbsp;If interested, learn the device specific startup functions that&nbsp;are called before<br />&nbsp;&nbsp; &nbsp;main().<br />&nbsp;&nbsp; &nbsp;You may also write a simple linker script.<br /><br />9. <b>Potential Bugs</b><br />&nbsp;&nbsp; &nbsp;Always keep an eye out for them. Unless it is something like&nbsp;a heisenbug for<br />&nbsp;&nbsp; &nbsp;example, it can be traced down. The time&nbsp;taken depends.]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The ARM Cortex-M3]]></title>
    <link href="http://ejhari.github.io/blog/2010/11/25/arm-cortex-m3/"/>
    <updated>2010-11-25T15:57:00+05:30</updated>
    <id>http://ejhari.github.io/blog/2010/11/25/arm-cortex-m3</id>
    <content type="html"><![CDATA[<b><u>The ARM Architecture</u></b><br /><br />The&nbsp;<b>ARM</b>&nbsp;is a&nbsp;32-bit&nbsp;reduced instruction set computer&nbsp;(RISC)&nbsp;instruction set architecture&nbsp;(ISA) developed by&nbsp;ARM Holdings. It was known as the&nbsp;<b>Advanced RISC Machine</b>, and before that as the&nbsp;<b>Acorn RISC Machine</b>. The ARM architecture is the most widely used&nbsp;32-bit&nbsp;ISA in terms of numbers produced.&nbsp;They were originally conceived as a processor for desktop personal computers by&nbsp;Acorn Computers, a market now dominated by the&nbsp;x86&nbsp;family used by&nbsp;IBM PC&nbsp;compatible and&nbsp;AppleMacintosh&nbsp;computers.<br /><br /><b><u>The ARM Cortex-M3</u></b><br /><br />The <b>ARM Cortex family</b> is a new generation of processors that has a standard CPU and system architecture. Unlike other ARM CPUs, the Cortex family is a complete processor core in itself.<br /><br />It comes in three series:<br /><b>A series</b>: For high end applications, using complex OS and user<br />&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; applications. It supports ARM, Thumb and &nbsp;Thumb-2<br />&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; instruction sets.<br /><b>R series</b>: They follow more of a RT system profile. They too<br />&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; supports ARM, Thumb and Thumb-2 instruction sets.<br /><b>M series</b>: For microcontroller applications, and other<br />&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; cost-sensitive projects. It supports only Thumb-2<br />&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; instruction set.<br /><br />There is a relative <b>performance level</b> for all these devices, ranging from 1-8. The highest level for M series is <b>3</b>.<br /><br />The <b>ARM Cortex-M3</b> provides the entire heart of a microcontroller, including timer, memory map, interrupt system, etc.<br />It has a Harvard Architecture, with about 4 GB total address space.<br /><br /><b><u>Operating Modes</u></b><br /><br />In <b>privileged mode</b>, the CPU has access to the full instruction set.<br />In <b>unprivileged mode</b>, xPSR related functions and access to most registers in the Cortex processor control space are disabled.<br /><br /><table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto; text-align: center;"><tbody><tr><td style="text-align: center;"><a href="http://1.bp.blogspot.com/_rkBB8V8TgZY/TO4rcFHrTMI/AAAAAAAAAWM/HAOUrHy5XSg/s1600/c3.png" imageanchor="1" style="margin-left: auto; margin-right: auto;"><img border="0" height="119" src="http://1.bp.blogspot.com/_rkBB8V8TgZY/TO4rcFHrTMI/AAAAAAAAAWM/HAOUrHy5XSg/s320/c3.png" width="320" /></a></td></tr><tr><td class="tr-caption" style="text-align: center;">Fig 1. The Cortex-M3 operating modes</td></tr></tbody></table>Both the <b>Thread and Handler modes</b> execute in privileged mode.<br /><br /><b><u>Programmer&#8217;s Model</u></b><br /><br />The Cortex CPU RISC processor has a load/store architecture. To perform data processing operations, operands must be <b>loaded</b> into a central register file, and the data operations are performed on these registers, and the result <b>stored</b> back to memory.<br /><br /><table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto; text-align: center;"><tbody><tr><td style="text-align: center;"><a href="http://1.bp.blogspot.com/_rkBB8V8TgZY/TO4lO8gbacI/AAAAAAAAAWE/Pewk73ric6A/s1600/c1.png" imageanchor="1" style="margin-left: auto; margin-right: auto;"><img border="0" height="87" src="http://1.bp.blogspot.com/_rkBB8V8TgZY/TO4lO8gbacI/AAAAAAAAAWE/Pewk73ric6A/s320/c1.png" width="320" /></a></td></tr><tr><td class="tr-caption" style="text-align: center;">Fig 2. The load/store architecture of Cortex-M3</td></tr></tbody></table><div><br /></div><div><b><u>Register File</u></b></div><div><br /></div><div>There are <b>sixteen 32-bit registers</b> in the processor register file, with an extra 32-bit&nbsp;<b>xPSR</b> (Program Status Register).</div><table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto; text-align: center;"><tbody><tr><td style="text-align: center;"><a href="http://2.bp.blogspot.com/_rkBB8V8TgZY/TO4ra1zVtGI/AAAAAAAAAWI/APTQ0S1p17c/s1600/c2.png" imageanchor="1" style="margin-left: auto; margin-right: auto;"><img border="0" height="320" src="http://2.bp.blogspot.com/_rkBB8V8TgZY/TO4ra1zVtGI/AAAAAAAAAWI/APTQ0S1p17c/s320/c2.png" width="141" /></a></td></tr><tr><td class="tr-caption" style="text-align: center;"><span class="Apple-style-span" style="font-size: small;"><span class="Apple-style-span" style="font-size: small;"><span class="Apple-style-span" style="font-size: 13px;">Fig 3. The Cortex-M3 register file and xPSR</span></span></span></td></tr></tbody></table>The <b>Link Register (LR)</b> stores the return address of each procedure call.<br /><div>There are two stacks, <b>main stack</b> and <b>process stack</b>, to support the two operating modes. Register R15 is the <b>Program Counter (PC)</b>.</div><div><br /></div><div><b><u>Memory Map</u></b></div><div class="separator" style="clear: both; text-align: center;"></div><br />The memory map for the code area, SRAM area, and the peripheral devices are shown below.<br /><table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto; text-align: center;"><tbody><tr><td style="text-align: center;"><a href="http://3.bp.blogspot.com/_rkBB8V8TgZY/TO4yNOaSN3I/AAAAAAAAAWU/uyYf_CbGkCM/s1600/c5.png" imageanchor="1" style="margin-left: auto; margin-right: auto;"><img border="0" src="http://3.bp.blogspot.com/_rkBB8V8TgZY/TO4yNOaSN3I/AAAAAAAAAWU/uyYf_CbGkCM/s1600/c5.png" /></a></td></tr><tr><td class="tr-caption" style="text-align: center;">Fig 4. A portion of the Cortex-M3 memory map</td></tr></tbody></table><br /><div><b><u>Features</u></b></div><div><br /></div><div>1. <b>Unaligned memory access</b> - The Cortex-M3 can make unaligned memory access, which ensures that SRAM is efficiently used.</div><div>2. <b>Bit Banding</b> - By this technique, direct bit manipulation can be performed on sections of peripheral and SRAM memory spaces, without the need for any special instructions (normal bit manipulations require READ, MODIFY, WRITE which is expensive in terms of number of cycles).</div><div>3. <b>Nested Vector Interrupt Controller (NVIC)</b> - It is a standard unit within the Cortex core, thus making the process of porting the code to different microcontrollers easier. It is designed to support nested interrupts and there are 16 levels of priority.&nbsp;</div><div>By the <b>interrupt preemption</b> technique, high priority interrupts can preempt low priority ones. By the <b>tail chaining</b> technique, successive interrupts can be added to the tail queue, thus reducing the latency in handling those interrupts.</div>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Analysing Jump Tables in MSP430 Assembly Code]]></title>
    <link href="http://ejhari.github.io/blog/2010/11/04/analysing-jump-tables-in-msp430/"/>
    <updated>2010-11-04T16:31:00+05:30</updated>
    <id>http://ejhari.github.io/blog/2010/11/04/analysing-jump-tables-in-msp430</id>
    <content type="html"><![CDATA[<div><b><u>Jump Table</u></b></div><div><br /></div><div>A jump table is an array of pointers to functions or an array of assembly code jump instructions.&nbsp;</div><div><br /></div><div>In assembling, jump tables are the most efficient method to handle switch statements with a large number of cases. The jump table is created only once and the required field in the table can be accessed simply by indexing.</div><div><br /></div><div>Especially in embedded systems, where there is a heavy constraint in available memory, jump tables can be efficient while consuming lesser memory too.</div><div><br /></div><div><b><u>Sample Program</u></b></div><div><br /></div><table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto; text-align: center;"><tbody><tr><td style="text-align: center;"><a href="http://4.bp.blogspot.com/_rkBB8V8TgZY/TNJCONGzuNI/AAAAAAAAAVA/uqo82UEsxJM/s1600/1.png" imageanchor="1" style="margin-left: auto; margin-right: auto;"><img border="0" height="285" src="http://4.bp.blogspot.com/_rkBB8V8TgZY/TNJCONGzuNI/AAAAAAAAAVA/uqo82UEsxJM/s320/1.png" width="320" /></a></td></tr><tr><td class="tr-caption" style="text-align: center;">Fig 1. Sample Program</td></tr></tbody></table><div>The switch has only four cases, hence there is no need for a jump table. The cases are implemented simply as:</div><table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto; text-align: center;"><tbody><tr><td style="text-align: center;"><a href="http://2.bp.blogspot.com/_rkBB8V8TgZY/TNJKAj7Wa3I/AAAAAAAAAVE/FuavTnI3YJ4/s1600/2.png" imageanchor="1" style="margin-left: auto; margin-right: auto;"><img border="0" height="320" src="http://2.bp.blogspot.com/_rkBB8V8TgZY/TNJKAj7Wa3I/AAAAAAAAAVE/FuavTnI3YJ4/s320/2.png" width="254" /></a></td></tr><tr><td class="tr-caption" style="text-align: center;">Fig 2. The switch implementation without jump table</td></tr></tbody></table><div>The behavior is almost as expected.</div><div>Now, I need a switch with enough cases, to get the attention of the gcc compiler heuristics.</div><table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto; text-align: center;"><tbody><tr><td style="text-align: center;"><a href="http://4.bp.blogspot.com/_rkBB8V8TgZY/TNJLnwtwmEI/AAAAAAAAAVI/l8PmcyJu8nE/s1600/3.png" imageanchor="1" style="margin-left: auto; margin-right: auto;"><img border="0" height="320" src="http://4.bp.blogspot.com/_rkBB8V8TgZY/TNJLnwtwmEI/AAAAAAAAAVI/l8PmcyJu8nE/s320/3.png" width="273" /></a></td></tr><tr><td class="tr-caption" style="text-align: center;">Fig 3. More cases for the switch</td></tr></tbody></table><div>I have to check the corresponding assembly code generated for the above program, to be sure.</div><div><table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto; text-align: center;"><tbody><tr><td style="text-align: center;"><a href="http://1.bp.blogspot.com/_rkBB8V8TgZY/TNJwzBLGzVI/AAAAAAAAAVY/ZBpv1WCRqww/s1600/4.png" imageanchor="1" style="margin-left: auto; margin-right: auto;"><img border="0" height="250" src="http://1.bp.blogspot.com/_rkBB8V8TgZY/TNJwzBLGzVI/AAAAAAAAAVY/ZBpv1WCRqww/s320/4.png" width="320" /></a></td></tr><tr><td class="tr-caption" style="text-align: center;">Fig 4. Lookup table created - PartI</td></tr></tbody></table></div><div><table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto; text-align: center;"><tbody><tr><td style="text-align: center;"><a href="http://4.bp.blogspot.com/_rkBB8V8TgZY/TNJwxOCFTRI/AAAAAAAAAVU/mhRDcq4gx7I/s1600/5.png" imageanchor="1" style="margin-left: auto; margin-right: auto;"><img border="0" height="320" src="http://4.bp.blogspot.com/_rkBB8V8TgZY/TNJwxOCFTRI/AAAAAAAAAVU/mhRDcq4gx7I/s320/5.png" width="311" /></a></td></tr><tr><td class="tr-caption" style="text-align: center;">Fig 5. Lookup table created - PartII</td></tr></tbody></table></div><div>&nbsp;It worked, the compiler decided that a jump table is really essential now.<br /><br />The &#8220;mov #1,@r4&#8221; line stores the value of variable &#8220;i&#8221;. There are 8 cases, numbered from 0 to 7. Hence first &#8220;i&#8221;, i.e, @r4 is compared with 8, for obvious reasons.<br /><br /><b><u>Analysing the &#8216;jump table&#8217;</u></b><br /><br />The <b>jump table has been created, starting from the address denoted by the label &#8220;.L11&#8221;</b>.<br /><br />The first entry in the table holds label &#8220;.L3&#8221; which is the starting address &nbsp;of the block of&nbsp;statements under &#8220;case 0:&#8221;.<br />The next entry is &#8220;.L4&#8221;, which is the starting address of the block of statements under &#8220;case 1:&#8221;.<br />And so on &#8230; Till &#8220;case 7:&#8221;.<br />There are <b>8 &#8220;.word&#8221;s in the jump table</b> too. Correct!<br /><br />The line N in the jump table holds the starting address of the block of statements under the corresponding &#8220;case N:&#8221;. In other words, each line is the offset to be added to &#8220;.L11&#8221;, to execute the required case statements.<br /><br /><b><u>Decoding &#8230;</u></b><br /><br />&#8220;r15&#8221; holds the value to be switched.<br /><br />&#8221;<b>rla r15</b>&#8221; rotates left arithmetically the value inside r15, once (multiplication by 2).<br />Remember that even addressing is required for MSP430 family. <br /><br />&#8220;<b>add #.L11,r15</b>&#8221; adds the present value of &#8220;r15&#8221; (similar to offset), with the address of the &nbsp;label &#8220;.L11&#8221; (similar to base address).<br />&#8220;r15&#8221; now contains the address of the line that lies at the given offset from &#8220;.L11&#8221;.<br /><br />After the &#8221;<b>mov @r15,r15</b>&#8221; line, &#8220;r15&#8221; now contains the starting address of a block of statements under the selected &#8220;case&#8221;.<br /><br />&#8221;<b>br r15</b>&#8221; simply branches to the address pointed to by r15.<br /><br />Clean.<br /><br /><b><u>Issues</u></b><br /><ul><li>How can you justify that <b>jump tables are friendly to embedded systems</b>?</li></ul>Its true that a jump table has a particular overhead for itself.<br /><br />Suppose there are a very large number of switch cases. Then, this &#8220;jump to index&#8221; overhead will be much lower than the cost to perform N case comparisons. That is why jump tables are usually preferred.<br /><ul><li><b>Jump tables work only when the case identifiers are consecutive</b>.</li></ul>For example, case 1, case 2, case 3, etc &#8230;<br /><br />In situations where the cases are random and spread over a large range, suitable searching methods are needed. Normally, binary search is used. The correct case can then be selected in 3 or 4 steps without performing N comparisons each time.</div>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Assembling in MSP430G2231]]></title>
    <link href="http://ejhari.github.io/blog/2010/11/03/assembling-in-msp430g2231/"/>
    <updated>2010-11-03T10:58:00+05:30</updated>
    <id>http://ejhari.github.io/blog/2010/11/03/assembling-in-msp430g2231</id>
    <content type="html"><![CDATA[<b><u>Sample Program</u></b><br /><br /><span class="Apple-tab-span" style="white-space: pre;"> </span><b>mov #0x0260,r5</b><br /><span class="Apple-tab-span" style="white-space: pre;"> </span><b>mov #0x0270,r6</b><br /><span class="Apple-tab-span" style="white-space: pre;"> </span><br />&nbsp;&nbsp; &nbsp;Loop:<br /><span class="Apple-tab-span" style="white-space: pre;"> </span><b>cmp #0,@r5</b><br /><span class="Apple-tab-span" style="white-space: pre;"> </span>jz End<br /><span class="Apple-tab-span" style="white-space: pre;"> </span><b>mov @r5,@r6</b><br /><span class="Apple-tab-span" style="white-space: pre;"> </span>incd r5<br /><span class="Apple-tab-span" style="white-space: pre;"> </span>incd r6<br /><span class="Apple-tab-span" style="white-space: pre;"> </span>jmp Loop<br /><span class="Apple-tab-span" style="white-space: pre;"> </span><br />&nbsp;&nbsp; &nbsp;End:<br /><span class="Apple-tab-span" style="white-space: pre;"> </span>mov #0x01,&amp;0x22<br /><span class="Apple-tab-span" style="white-space: pre;"> </span><b>mov #0x01,&amp;0x21</b><br /><br />This code demonstrates a simple implementation of &#8217;<b>strcpy</b>&#8217; in msp430 assembly code. The first string is present in the location 0x0260. It is to be copied to another memory location starting from 0x0270. The RAM area of MSP430G2231 lies in the range 0x0200 to 0x027F.<br /><br />Whats worth noticing is the ease with which some operations are defined which are otherwise very difficult in other assembly codes.<br /><br />The program exits gracefully by lighting the red led, after successfully copying the string.<br /><br /><b><u>Notations</u></b><br /><br /><b>#</b> - This symbol is used to indicate a pure number. The<br />&nbsp;&nbsp; &nbsp; &nbsp;number can be an integer, in binary or a<br />&nbsp;&nbsp; &nbsp; &nbsp;hexadecimal.<br />&nbsp;&nbsp; &nbsp; &nbsp;For example, &#8220;mov #0x0260,r5&#8221; will move the hex<br />&nbsp;&nbsp; &nbsp; &nbsp;number 0260 to register r5.<br /><br /><b>@</b> - It can happen that, the data stored in a register is<br />&nbsp;&nbsp; &nbsp; &nbsp;the address of another memory location. The actual<br />&nbsp;&nbsp; &nbsp; &nbsp;value inside this address can be accessed by using<br />&nbsp;&nbsp; &nbsp; &nbsp;the &#8216;@&#8217;&nbsp;symbol. When &#8216;@&#8217; is used, the value in a<br />&nbsp;&nbsp; &nbsp; &nbsp;register is interpreted to be the address of a memory<br />&nbsp;&nbsp; &nbsp; &nbsp;location, and the actual data present in this location<br />&nbsp;&nbsp; &nbsp; &nbsp;is fetched.<br />&nbsp;&nbsp; &nbsp; &nbsp;The line &#8220;cmp #0,@r5&#8221; compares the number 0 with<br />&nbsp;&nbsp; &nbsp; &nbsp;the data in the memory location pointed to by the<br />&nbsp;&nbsp; &nbsp; &nbsp;value of r5.<br /><br /><b>&amp;</b> - When the address of a location is to be used directly,<br />&nbsp;&nbsp; &nbsp; &nbsp;the &#8216;&amp;&#8217; symbol is used. If not, the address is<br />&nbsp;&nbsp; &nbsp; &nbsp;interpreted as just a number, thereby generating errors.<br /><br /><b><u>Notable Feature</u></b><br /><br /><b>@ and again @</b><br />&nbsp;&nbsp; &nbsp;The line &#8220;mov @r5,@r6&#8221; is simple, sleek, easy-to-understand, self explanatory and normally illegal in other assembly languages.<br /><br />&nbsp;&nbsp; &nbsp;Technically, the &#8216;@&#8217; operation is emulated for the destination part. The &#8220;mov @r5,@r6&#8221; line will be changed to &#8221;<b>mov @r5,0x0(r6)</b>&#8221; after running msp430-gcc.<br /><br /><b><u>Conclusion</u></b><br /><table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto; text-align: center;"><tbody><tr><td style="text-align: center;"><a href="http://1.bp.blogspot.com/_rkBB8V8TgZY/TND2mraxVGI/AAAAAAAAAU8/R9RssfKc9mc/s1600/IMG_7331.JPG" imageanchor="1" style="margin-left: auto; margin-right: auto;"><img border="0" height="240" src="http://1.bp.blogspot.com/_rkBB8V8TgZY/TND2mraxVGI/AAAAAAAAAU8/R9RssfKc9mc/s320/IMG_7331.JPG" width="320" /></a></td></tr><tr><td class="tr-caption" style="text-align: center;">The MSP-EXP430G2 Launchpad (TI) for the MSP430 family</td></tr></tbody></table>Altogether, there are only 27 instructions with about 7 addressing modes in the MSP430 family, which are easy to grasp and employ.<br />&nbsp;&nbsp; <br />Coding in MSP430 family is fun!]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Remote Debugging the MSP-EXP430G2 LaunchPad From TI]]></title>
    <link href="http://ejhari.github.io/blog/2010/10/26/remote-debugging-msp-exp430g2-launchpad/"/>
    <updated>2010-10-26T17:55:00+05:30</updated>
    <id>http://ejhari.github.io/blog/2010/10/26/remote-debugging-msp-exp430g2-launchpad</id>
    <content type="html"><![CDATA[<b><u>Remote Debugging in GDB</u></b><br /><br /><div>There is an inbuilt ability for gdb to also debug programs that reside in remote machines using a gdb-specific protocol. The remote machine is connected to the host via a serial line, or through a port. This remote connection is called a gdb <b>proxy</b>.<br /><br />While inside gdb, give as:<br />&nbsp;&nbsp; &nbsp;<b>(gdb) target remote localhost:2000</b><br /><br />This would enable gdb to perform all debugging operations on a program connected to the localhost machine through the port 2000.<br /><br />There is a prerequisite that the machine that is to be present in the same port must have set permissions for an external debugger.<br /><br /><b><u>Sample Program</u></b></div><div><b><u><br /></u></b></div><table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto; text-align: center;"><tbody><tr><td style="text-align: center;"><a href="http://1.bp.blogspot.com/_rkBB8V8TgZY/TMbCTvv1f9I/AAAAAAAAAUs/kPrwRO6vT2M/s1600/led1.png" imageanchor="1" style="margin-left: auto; margin-right: auto;"><img border="0" height="161" src="http://1.bp.blogspot.com/_rkBB8V8TgZY/TMbCTvv1f9I/AAAAAAAAAUs/kPrwRO6vT2M/s320/led1.png" width="320" /></a></td></tr><tr><td class="tr-caption" style="text-align: center;">Fig 1. Sample program - led1.c</td></tr></tbody></table><div>This sample program named &#8216;led1.c&#8217;, is only used to demonstrate remote debugging.</div><div><br /><b><u>The Preparation</u></b></div><div class="separator" style="clear: both; text-align: auto;"><br /></div><div>Connect the LaunchPad to the system. Now the sample program is cross-compiled, and downloaded into the LaunchPad.<br />For further details, refer:<br /><a href="http://harijohnkuriakose.blogspot.com/2010/10/switching-on-launchpad-leds.html">switching-on-launchpad-leds.html</a><br /><br />For necessary reasons, I am calling the current terminal, &#8221;<b>Terminal1</b>&#8221;.<br /><br />The &#8217;<b>mspdebug</b>&#8217; has a built-in command that enables it to run a GDB remote stub on a specified TCP/IP port. If no port is specified, 2000 is taken as default.<br /><br />Give as:<br />&nbsp;&nbsp; &nbsp;<b>(mspdebug) gdb</b><br /><br />A message will be displayed as:<br />&nbsp;&nbsp; &nbsp;<b>Bound to port 2000. Now waiting for connection&#8230;</b><br /><br />At this time, open another terminal. I&#8217;m calling it &#8221;<b>Terminal2</b>&#8221;.<br />In Terminal2, give as:<br />&nbsp;&nbsp; &nbsp;<b>msp430-gdb -q a.out</b><br /><br />Here, &#8216;a.out&#8217; is the LaunchPad-specific executable binary obtained by cross-compiling the above sample program.<br /><br />Now, connect to the remote machine already waiting in port 2000 as:<br />&nbsp;&nbsp; &nbsp;<b>(gdb) target remote localhost:2000</b><br /><br />An acknowledgement message will be displayed as:<br />&nbsp;&nbsp; &nbsp;<b>Remote debugging using localhost:2000</b><br />&nbsp;&nbsp; &nbsp;<b>0x0000fc00 in _reset_vector__ ()</b><br /><br />If you check back in Terminal1, messages similar to the following will have been displayed:<br />&nbsp;&nbsp; &nbsp;<b>Client connected from 127.0.0.1:47558</b><br />&nbsp;&nbsp; &nbsp;<b>Clearing all breakpoints&#8230;</b><br />&nbsp;&nbsp; &nbsp;<b>Reading 2 bytes from 0xfc00</b><br /><br />The current states of the two terminals is as shown:</div><table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto; text-align: center;"><tbody><tr><td style="text-align: center;"><a href="http://2.bp.blogspot.com/_rkBB8V8TgZY/TMbEVjegF_I/AAAAAAAAAUw/b9gcPoUeKVo/s1600/t1nt2-1.png" imageanchor="1" style="margin-left: auto; margin-right: auto;"><img border="0" height="164" src="http://2.bp.blogspot.com/_rkBB8V8TgZY/TMbEVjegF_I/AAAAAAAAAUw/b9gcPoUeKVo/s320/t1nt2-1.png" width="320" /></a></td></tr><tr><td class="tr-caption" style="text-align: center;">Fig 2. Terminal1 (left side) &nbsp;and Terminal 2 (right side)</td></tr></tbody></table><div>On listing &#8216;led1.c&#8217; in Terminal2, the memory addresses from which the bytes are read will be displayed in Terminal1, simultaneously.</div><div><br /></div><table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto; text-align: center;"><tbody><tr><td style="text-align: center;"><a href="http://1.bp.blogspot.com/_rkBB8V8TgZY/TMbFfzZmXdI/AAAAAAAAAU0/T6gY7iyHHKw/s1600/t1nt2-2.png" imageanchor="1" style="margin-left: auto; margin-right: auto;"><img border="0" height="165" src="http://1.bp.blogspot.com/_rkBB8V8TgZY/TMbFfzZmXdI/AAAAAAAAAU0/T6gY7iyHHKw/s320/t1nt2-2.png" width="320" /></a></td></tr><tr><td class="tr-caption" style="text-align: center;">Fig 3. Listing the sample program</td></tr></tbody></table><table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto; text-align: center;"><tbody><tr><td style="text-align: center;"><a href="http://2.bp.blogspot.com/_rkBB8V8TgZY/TMbGr9yUWNI/AAAAAAAAAU4/8RgWZTSv8qU/s1600/t1nt2-3.png" imageanchor="1" style="margin-left: auto; margin-right: auto;"><img border="0" height="166" src="http://2.bp.blogspot.com/_rkBB8V8TgZY/TMbGr9yUWNI/AAAAAAAAAU4/8RgWZTSv8qU/s320/t1nt2-3.png" width="320" /></a></td></tr><tr><td class="tr-caption" style="text-align: center;">Fig 4. Single stepping through runtime libraries</td></tr></tbody></table><div>On further single steps from this point, the runtime libraries through which the control passes until main( ) is reached, can be observed directly !!!<br />Notice that a considerable number of bytes have been read.<br /><br />Now, single step till the instruction &#8216;P1OUT = 0x01&#8217; is reached.&nbsp;</div><div><br /></div><div><b><u>The Action</u></b></div><div><br /></div><div>At this point, the next single step will cause it to execute, which will pass a high voltage (binary 1) to the red led on the LaunchPad, i.e., do it, and see the red LaunchPad led (P1.0) flash bright !!!</div><div><br />On next step, a binary 0 is passed to P1.0, causing it to be off.<br /><br />Single step again, and see the green LaunchPad led (P1.6) flash before your eyes !!!<br /><br />Turn it off too, and keep on single stepping, until you relish the wonderful thing thats happening infront of you &#8230; This is GDB at its best !!!</div><div>At all these points, the memory addresses from which reading takes place are displayed in Terminal1.</div><div><br /><b>N. B.</b>&nbsp;</div><div><ul><li>Properly exit from both mspdebug in Terminal1 and GDB in Terminal2, before disconnecting the LaunchPad from the system.</li><li>Exit from GDB in Terminal2 first, and then mspdebug in Terminal1.</li></ul><b><u></u></b><br /><b><u></u></b><br /><b><u><div><span class="Apple-style-span" style="-webkit-text-decorations-in-effect: none; font-weight: normal;"><b><u><br /></u></b></span></div><div><span class="Apple-style-span" style="-webkit-text-decorations-in-effect: none; font-weight: normal;"><b><u>Addendum</u></b></span></div></u></b><br />It was one of the cutest moments, to actually &#8216;see&#8217; GDB in work.&nbsp;</div><div>I am crazy on LaunchPad !!!&nbsp;</div>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Switching on the LaunchPad LEDs ...]]></title>
    <link href="http://ejhari.github.io/blog/2010/10/26/switching-on-launchpad-leds/"/>
    <updated>2010-10-26T07:30:00+05:30</updated>
    <id>http://ejhari.github.io/blog/2010/10/26/switching-on-launchpad-leds</id>
    <content type="html"><![CDATA[<div style="margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;"><b><u>Installation</u></b></div><div style="margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;"><br /></div><div style="margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;">The basic amenities are:</div><ul><li><b>mspgcc</b></li><li><b>libusb-dev</b></li><li><b>libreadline-dev</b></li><li><b>mspdebug</b></li></ul><div style="margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;">After these are installed,&nbsp;<b>msp-430-gcc</b>&nbsp;or&nbsp;<b>msp-430-gcc-4.4.3</b>&nbsp;can be used to cross-compile the C code.</div><div style="margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;"><br /></div><div style="margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;">The &#8216;libusb-dev&#8217; library contains necessary libraries for sucessfully connecting the LaunchPad through the USB cable.</div><div style="margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;"><br />The &#8216;libreadline-dev&#8217; library is for enabling history for the commands typed inside the &#8216;mspdebug&#8217; environment.<br /><br /></div><div style="margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;">Ensure that the LaunchPad has been detected by:</div><div style="margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;">&nbsp;&nbsp; &nbsp;<b>dmesg | tail</b></div><div style="margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;"><br /></div><div style="margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;">Your LaunchPad will be assigned to the device:&nbsp;<b>/dev/ttyACM0</b>.</div><div style="margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;"><br /></div><div style="margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;">The mspdebug is used for interacting with, erasing or burning the flash memory of the MSP chip. It also allows to debug the downloaded program present inside the MSP chip flash memory, through the inbuilt JTAG or Spy-By-Wire support.</div><div style="margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;"><br /></div><div style="margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;">The&nbsp;<b>eZ430-RF2500 too</b>l of the mspdebug supports the USB connection and also provides&nbsp;<b>Spy-By-Wire</b>&nbsp;debugging.</div><div style="margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;"><br /></div><div style="margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;"><br /></div><div style="margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;"><b><u>Switch on your LEDs !!!</u></b>&nbsp;&nbsp;</div><div style="margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;"><br /></div><div style="margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;">A sample program led2.c, which lights up both the LEDs on th LaunchPad when the switch S2 on P1.3 is pressed.</div><table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-bottom: 0.5em; margin-left: auto; margin-right: auto; padding-bottom: 6px; padding-left: 6px; padding-right: 6px; padding-top: 6px; text-align: center;"><tbody><tr><td style="text-align: center;"><div style="margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;"><a href="http://2.bp.blogspot.com/_rkBB8V8TgZY/TMY0Pp8ry9I/AAAAAAAAAUo/OpOIQhY8NIM/s1600/prog.png" imageanchor="1" style="margin-left: auto; margin-right: auto;"><img border="0" height="164" src="http://2.bp.blogspot.com/_rkBB8V8TgZY/TMY0Pp8ry9I/AAAAAAAAAUo/OpOIQhY8NIM/s320/prog.png" style="cursor: move;" width="320" /></a></div></td></tr><tr><td class="tr-caption" style="font-size: 13px; padding-top: 4px; text-align: center;"><div style="margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;">Fig 1. The sample program</div></td></tr></tbody></table><div style="margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;">First, cross-compile the code.</div><div style="margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;">&nbsp;&nbsp; &nbsp;<b>msp430-gcc-4.4.3 -g led2.c</b></div><div style="margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;"><br /></div><div style="margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;">Now connect the LaunchPad. Then:</div><div style="margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;">&nbsp;&nbsp; &nbsp;<b>sudo mspdebug rf2500</b></div><div style="margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;"><br /></div><table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-bottom: 0.5em; margin-left: auto; margin-right: auto; padding-bottom: 6px; padding-left: 6px; padding-right: 6px; padding-top: 6px; text-align: center;"><tbody><tr><td style="text-align: center;"><div style="margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;"><a href="http://4.bp.blogspot.com/_rkBB8V8TgZY/TMYwxhMF0VI/AAAAAAAAAUc/oLqtLpD-R9o/s1600/4.png" imageanchor="1" style="margin-left: auto; margin-right: auto;"><img border="0" height="222" src="http://4.bp.blogspot.com/_rkBB8V8TgZY/TMYwxhMF0VI/AAAAAAAAAUc/oLqtLpD-R9o/s320/4.png" style="cursor: move;" width="320" /></a></div></td></tr><tr><td class="tr-caption" style="font-size: 13px; padding-top: 4px; text-align: center;"><div style="margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;">Fig 2. Inside mspdebug</div></td></tr></tbody></table><div style="margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;">To download the code, use:</div><div style="margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;">&nbsp;&nbsp; &nbsp;<b>(mspdebug)&nbsp;prog a.out</b></div><div style="margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;"><br /></div><table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-bottom: 0.5em; margin-left: auto; margin-right: auto; padding-bottom: 6px; padding-left: 6px; padding-right: 6px; padding-top: 6px; text-align: center;"><tbody><tr><td style="text-align: center;"><div style="margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;"><a href="http://1.bp.blogspot.com/_rkBB8V8TgZY/TMYx9kSw1CI/AAAAAAAAAUg/s4brsEHVQOc/s1600/5.png" imageanchor="1" style="margin-left: auto; margin-right: auto;"><img border="0" height="36" src="http://1.bp.blogspot.com/_rkBB8V8TgZY/TMYx9kSw1CI/AAAAAAAAAUg/s4brsEHVQOc/s320/5.png" style="cursor: move;" width="320" /></a></div></td></tr><tr><td class="tr-caption" style="font-size: 13px; padding-top: 4px; text-align: center;"><div style="margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;">Fig 3. Downloading the code</div></td></tr></tbody></table><div style="margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;">Now run it, as:</div><div style="margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;">&nbsp;&nbsp; &nbsp;<b>(mspdebug) run</b></div><table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-bottom: 0.5em; margin-left: auto; margin-right: auto; padding-bottom: 6px; padding-left: 6px; padding-right: 6px; padding-top: 6px; text-align: center;"><tbody><tr><td style="text-align: center;"><div style="margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;"><a href="http://3.bp.blogspot.com/_rkBB8V8TgZY/TMYyvEiV0EI/AAAAAAAAAUk/uR0bK9kuvRM/s1600/6.png" imageanchor="1" style="margin-left: auto; margin-right: auto;"><img border="0" height="29" src="http://3.bp.blogspot.com/_rkBB8V8TgZY/TMYyvEiV0EI/AAAAAAAAAUk/uR0bK9kuvRM/s320/6.png" style="cursor: move;" width="320" /></a></div></td></tr><tr><td class="tr-caption" style="font-size: 13px; padding-top: 4px; text-align: center;"><div style="margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;">Fig 4. Running the code</div><div><br /></div></td></tr></tbody></table>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Addressing Modes in the MSP430 Family]]></title>
    <link href="http://ejhari.github.io/blog/2010/10/26/addressing-modes-in-msp430-family/"/>
    <updated>2010-10-26T07:29:00+05:30</updated>
    <id>http://ejhari.github.io/blog/2010/10/26/addressing-modes-in-msp430-family</id>
    <content type="html"><![CDATA[<b><u></u></b><br /><b><u><div class="separator" style="clear: both; text-align: center;"><a href="http://4.bp.blogspot.com/_rkBB8V8TgZY/TMYq_-qXLsI/AAAAAAAAAUY/7NpULFeHm08/s1600/IMG_7338.JPG" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" height="240" src="http://4.bp.blogspot.com/_rkBB8V8TgZY/TMYq_-qXLsI/AAAAAAAAAUY/7NpULFeHm08/s320/IMG_7338.JPG" width="320" /></a></div><div><b><u><br /></u></b></div><div><b><u><br /></u></b></div><div><span class="Apple-style-span" style="-webkit-text-decorations-in-effect: none; font-weight: normal;"><b><u>Register Mode</u></b></span></div></u></b><br /><br /><b>mov.w</b><span class="Apple-tab-span" style="white-space: pre;"><b> </b></span><b>R4,R5</b><span class="Apple-tab-span" style="white-space: pre;"> </span>; move (copy) word from R4 to R6<br /><br />It is the fastest, with&nbsp;only 1 machine cycle needed.<br />Any of the 16 registers can be used as source or destination.<br /><br />Special cases:<br /><ul><li><span class="Apple-tab-span" style="white-space: pre;"> </span>PC - it will be autoincremented before it is used as source</li><li><span class="Apple-tab-span" style="white-space: pre;"> </span>Both PC and SP must be even, because they are always used as words. so &nbsp;LSB discarded if they are used as destination</li><li><span class="Apple-tab-span" style="white-space: pre;"> </span>CG2 - it reads 0 as source</li></ul>for byte operations:<br /><ul><li><span class="Apple-tab-span" style="white-space: pre;"> </span>operand is taken from lower byte only</li><li><span class="Apple-tab-span" style="white-space: pre;"> </span>writing is performed to lower byte only, upper byte is cleared</li></ul>To use the upper byte in a regiser as source, &#8217;<b>swpb</b>&#8217; may be used.<br /><br /><b><u>Indexed Mode</u></b><u>&nbsp;</u><br /><br />Similar to arrays.<br /><br /><b>mov.b </b><span class="Apple-tab-span" style="white-space: pre;"><b> </b></span><b>3(R5),R6</b> <span class="Apple-tab-span" style="white-space: pre;"> </span>; load byte from address 3+(R5) into R6<br /><br />Here, base address is 3.<br />Indexing can be used for the source or destination part.<br /><br /><b><u>Symbolic Mode</u></b><u> </u><b><u>(PC Relative)</u></b><br /><br />When PC is used as the base address in the indexed mode, its called symbolic mode by TI. The offset to be added to the PC is given as the constant.<br /><br />mov.w <span class="Apple-tab-span" style="white-space: pre;"> </span>Loop,R6 <span class="Apple-tab-span" style="white-space: pre;"> </span>; load word Loop into R6<br /><br />Assembler replaces this as:<br /><br /><b>mov.w </b><span class="Apple-tab-span" style="white-space: pre;"><b> </b></span><b> X(PC),R6 </b><span class="Apple-tab-span" style="white-space: pre;"> </span>;<br /><br />where X = Loop - PC, is the offset in this case. It is caluclated by the assembler, which also performs autoincrementing of PC.<br /><br />In MSP430, absolute addressing can reach all the memory map. The symbolic mode is mainly meant for MSP430X, etc.<br /><br /><b><u>Absolute Mode</u></b><br /><br />This is a special case where the constant in the indexed mode is the absolute address of the data. Since the constant is already the final address, the base must be taken as an address of 0. Usually the SR is selected for this purpose. It behaves as 0 when used as the base, i.e, this is one instance when the SR behaves as a constant generator (CG1).<br /><br />Absolute addressing is shown by the prefix &amp;.<br /><br /><b>mov.b </b><span class="Apple-tab-span" style="white-space: pre;"><b> </b></span><b>P1IN,R6</b> <span class="Apple-tab-span" style="white-space: pre;"> </span>; load byte P1IN into R6<br /><br />It is replaced by the assembler as:<br /><br /><b>mov.b </b><span class="Apple-tab-span" style="white-space: pre;"><b> </b></span><b>P1IN(SR),R6</b> <span class="Apple-tab-span" style="white-space: pre;"> </span>;<br /><br />P1IN is the offset, and SR behaves as 0.<br /><br /><b><u>SP-Relative</u></b><br /><br />This is not a separate mode in itself. At any time, any value pushed into the stack previously can be accessed, by offseting a suitable amount from the SP. For example:<br /><br /><b>mov.w </b><span class="Apple-tab-span" style="white-space: pre;"><b> </b></span><b>2(SP),R6</b> <span class="Apple-tab-span" style="white-space: pre;"> </span>;<br /><br /><b><u>Indirect Register Mode</u></b><br /><br />This is available only for the source. It is indicated by the sign <b>@</b>. It means that the contents of a register is used as the address of the operand, i.e, the register contains a &#8220;pointer&#8221; to the actual operand.<br /><br /><b>mov.w </b><span class="Apple-tab-span" style="white-space: pre;"><b> </b></span><b>@R5,R6</b> <span class="Apple-tab-span" style="white-space: pre;"> </span>; load word from address pointed to by R5<br /><br />This is similar to indexed addressing with base address 0. It saves a word of program memory, hence makes it faster.<br /><br />This mode cannot be used for destination. Using indexed addressing instead:<br /><br /><b>mov.w </b><span class="Apple-tab-span" style="white-space: pre;"><b> </b></span><b>R6,0(R5)</b> <span class="Apple-tab-span" style="white-space: pre;"> </span>; store word from R6 into address 0+(R5)<br /><br />There is a penalty that a word 0 must be stored in the program memory, and fetched. The constant generator cannot be used.<br /><br /><b><u>Indirect Autoincrement Register Mode</u></b><br /><br />This is also available only for the source. It is indicated by a <b>@ in the front, and a + as suffix</b>. Here, the register is used as a pointer as in the indirect register mode. After this, the value in the register is autoincremented by 1 if a byte has been fetched, or by 2 if a word has been fetched.<br /><br /><b>mov.w @R5+, R6</b><br /><br />Since this mode cannot be used for destination, the indexed addressing mode must be used and then explicitly incrementing the value of the register appropriately. Obviously, two instructions would be required.<br /><br /><b>N.B.</b><br /><ul><li>MSP430 only has postincrement addressing.</li><li>In all the addressing modes, all operations on the first address are fully&nbsp;completed before the second address is evaluated.</li></ul><br /><b><u>Immediate Mode</u></b><br /><br />It is a special case of autoincrement addressing that uses program counter PC. For example:<br /><br /><b>mov.w </b><span class="Apple-tab-span" style="white-space: pre;"><b> </b></span><b>@PC+,R6</b> <span class="Apple-tab-span" style="white-space: pre;"> </span>;<br /><br />Here, after the instruction pointed to by PC has been fetched, PC is autoincremented, i.e., PC now points to the next instruction. This particular instruction will be the one copied into R6.]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The MSP430 Central Processing Unit]]></title>
    <link href="http://ejhari.github.io/blog/2010/10/26/msp430-central-processing-unit/"/>
    <updated>2010-10-26T07:27:00+05:30</updated>
    <id>http://ejhari.github.io/blog/2010/10/26/msp430-central-processing-unit</id>
    <content type="html"><![CDATA[MSP430 has 4 special purpose and 12 general purpose registers.<br /><table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto; text-align: center;"><tbody><tr><td style="text-align: center;"><a href="http://3.bp.blogspot.com/_rkBB8V8TgZY/TMYn_0w0cKI/AAAAAAAAAUU/Uj9b6z4mYA0/s1600/IMG_7330.JPG" imageanchor="1" style="margin-left: auto; margin-right: auto;"><img border="0" height="240" src="http://3.bp.blogspot.com/_rkBB8V8TgZY/TMYn_0w0cKI/AAAAAAAAAUU/Uj9b6z4mYA0/s320/IMG_7330.JPG" width="320" /></a></td></tr><tr><td class="tr-caption" style="text-align: center;">Fig 1. The MSP430 LaunchPad from TI</td></tr></tbody></table><br />The registers in MSP430 are:<br /><table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto; text-align: center;"><tbody><tr><td style="text-align: center;"><a href="http://3.bp.blogspot.com/_rkBB8V8TgZY/TMYlIda6pEI/AAAAAAAAAUI/YgZ6C53TSMM/s1600/1.png" imageanchor="1" style="margin-left: auto; margin-right: auto;"><img border="0" height="158" src="http://3.bp.blogspot.com/_rkBB8V8TgZY/TMYlIda6pEI/AAAAAAAAAUI/YgZ6C53TSMM/s320/1.png" width="320" /></a></td></tr><tr><td class="tr-caption" style="text-align: center;">Fig 2. The registers in MSP430</td></tr></tbody></table><br /><b>Program Counter</b> <b>(PC)</b><br /><br />The program counter stores the address of the instruction which is to be executed next.<br /><br />For the execution of each instruction, first the address stored in the PC is placed in the address bus. Then, the instruction stored in this address is fetched. Meanwhile, the PC is automatically incremented by 2, i.e, PC now contains the address of the next instruction. The current instruction is now executed, and the next instruction fetched simultaneously.<br /><br />This is the normal procedure, unless a jump instruction is encountered. In such cases, the PC is incremented by an offset contained in the opcode of the jump instruction. For interrupts and subroutines, the return address needs to be stored in the stack pointer before jumping.<br /><br />An instruction comprises of 1-3 words, which are aligned to even addresses. So the LSB is hardwired to zero.<br /><br /><b>Stack Pointer (SP)</b><br /><br />In MSP 430, the top of the RAM (12b bytes) is initially allotted to the stack pointer. Further writings into the stack are performed at lower addresses (<b>goes downwards</b>).<br />Also, the lsb of a stack address is always hardwired to zero, i.e., <b>stack addresses always point to words</b>. If only a byte is written into the stack, then one byte will be wasted to preserve this alignment.<br /><br />In assembly language, after a reset, the stack pointer must be explicitly initialized to 0x280.<br /><b><br /></b><br /><b>Predecrement addressing</b> (Pushing) - To insert a new value into the stack, first the stack pointer is decremented by 2, then writing is performed.<br /><b>Postincrement addressing</b> (Popping) - To delete the current value in the stack pointer, first the value is deleted, then the stack pointer is incremented by 2.<br /><br /><table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto; text-align: center;"><tbody><tr><td style="text-align: center;"><a href="http://3.bp.blogspot.com/_rkBB8V8TgZY/TMYmL6nLGvI/AAAAAAAAAUM/G37Neu_C5Bo/s1600/2.png" imageanchor="1" style="margin-left: auto; margin-right: auto;"><img border="0" height="320" src="http://3.bp.blogspot.com/_rkBB8V8TgZY/TMYmL6nLGvI/AAAAAAAAAUM/G37Neu_C5Bo/s320/2.png" width="293" /></a></td></tr><tr><td class="tr-caption" style="text-align: center;">Fig 3. Basic stack operations in MSP430</td></tr></tbody></table><br /><b>Status Register (SR)</b><br /><br /><table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto; text-align: center;"><tbody><tr><td style="text-align: center;"><a href="http://1.bp.blogspot.com/_rkBB8V8TgZY/TMYmmetuicI/AAAAAAAAAUQ/FzyQHDD6q60/s1600/3.png" imageanchor="1" style="margin-left: auto; margin-right: auto;"><img border="0" height="41" src="http://1.bp.blogspot.com/_rkBB8V8TgZY/TMYmmetuicI/AAAAAAAAAUQ/FzyQHDD6q60/s320/3.png" width="320" /></a></td></tr><tr><td class="tr-caption" style="text-align: center;">Fig 4. The Status Register</td></tr></tbody></table><b>N</b> - Negative Flag<br /><b>Z</b> - Zero Flag<br /><b>C</b> - Carry flag<br /><b>V</b> - Signed Overflow Flag<br /><b>GIE</b> - General Interupt Enable<br /><b>SCG1</b>, <b>SCG0</b>, <b>OSC OFF</b>, <b>CPU OFF</b> - Control of Low Power Modes<br /><b><span class="Apple-style-span" style="font-weight: normal;"><br /></span></b><br /><b><span class="Apple-style-span" style="font-weight: normal;">The SR also acts as constant generator CG0.</span></b><br /><b><br /></b><br /><b>Constant Generator (CG0, CG1)</b><br />Both R2 and R3 are used to generate 6 most frequently used constants. This saves fetching time. The constant generated depends on the addressing mode used.<br /><br /><b>General Purpose Registers</b><br />There are 12 of them, <b>R4 - R15</b>. They can be used to store address or data, since both are 16 bit in the MSP430 family. This leads to considerable simplification in the operations.]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The MSP-EXP430G2 Development Board]]></title>
    <link href="http://ejhari.github.io/blog/2010/10/26/msp-exp430g2-development-board/"/>
    <updated>2010-10-26T07:27:00+05:30</updated>
    <id>http://ejhari.github.io/blog/2010/10/26/msp-exp430g2-development-board</id>
    <content type="html"><![CDATA[First of all, thanks to <a href="http://pramode.net/">Pramode Sir</a> for allowing me to lay my hands on this beauty !!!<br /><br /><b>The MSP-EXP430G2 Texas Instruments (TI) Launchpad is a $4.30 (only!) Development Board for the MSP430 family from Texas Instruments (TI).</b><br /><br />The 14 pin DIP chip shown in the pictures is a <b>MSP430G2231</b>.<br /><div><br /><table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto; text-align: center;"><tbody><tr><td style="text-align: center;"><a href="http://3.bp.blogspot.com/_rkBB8V8TgZY/TMXa5vGGaHI/AAAAAAAAAT8/6dyOMYLfCEI/s1600/IMG_7321.JPG" imageanchor="1" style="margin-left: auto; margin-right: auto;"><img border="0" height="240" src="http://3.bp.blogspot.com/_rkBB8V8TgZY/TMXa5vGGaHI/AAAAAAAAAT8/6dyOMYLfCEI/s320/IMG_7321.JPG" width="320" /></a></td></tr><tr><td class="tr-caption" style="text-align: center;">Fig 1. Top Side View.</td></tr></tbody></table><b><span class="Apple-style-span" style="font-weight: normal;"><br /></span></b><br /><b>Overview</b><br /><br />The original MSP430 was introduced in the late 1990&#8217;s. In its currrent form, it is a decent midrocontroller with a 16-bit processor having von-Neumann architecture. It is primarily designed for low power applications.<br /><br />MSP430 is a 16-bit microcontroller, with obviously, a 16 bit data bus and a 16 bit address bus. Its address space is therefore, 2^16 = 64KB of memory. The registers in its CPU are also 16 bit. Hence, machine language instructions can be used with ease whether it be local variables, address or data. Note that MSP430X has extended registers, and a wider address bus and can handle upto 1 MB of memory.<br /><br />It can be said to be a RISC, but unlike a pure &#8220;RISC&#8221;, it can perform arithmetic operations directly on values in memory. Overall, the MSP430 is one of the simplest microcontrollers from Texas Instruments (TI).<br /><br /><table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto; text-align: center;"><tbody><tr><td style="text-align: center;"><img border="0" height="240" src="http://3.bp.blogspot.com/_rkBB8V8TgZY/TMXboJiYyJI/AAAAAAAAAUA/Dpyq_RIGArI/s320/IMG_7326.JPG" style="margin-left: auto; margin-right: auto;" width="320" /></td></tr><tr><td class="tr-caption" style="text-align: center;">Fig 2. Side View.</td></tr></tbody></table></div><div><div><br /></div><div><b>Its all in the name &#8230;</b></div><div><b><br /></b></div><div>The name MSP stands for <b>Mixed Signal Processor (MSP)</b>. It indicates that the device can take analog signals as input, and there are also analog to digital converters with a resolution of upto 16 bits.</div><div><br /></div><div>The letter after MSP430 shows the type of memory.</div><div>&nbsp;&nbsp; &nbsp;<b>F</b> - Flash memory</div><div>&nbsp;&nbsp; &nbsp;<b>C</b> - ROM</div><div><br /></div><div>For <b>ASSP</b>s, there is a second letter, to indicate the type of measurement.</div><div>&nbsp;&nbsp; &nbsp;<b>E</b> - electricity</div><div>&nbsp;&nbsp; &nbsp;<b>W</b> - water</div><div>&nbsp;&nbsp; &nbsp;<b>G</b> - signals with a gain stage and op-amps in-between</div><div><br /></div><div>Next digit shows family, and final 2 or 3 digits identify the specific device.</div></div><div><br /></div><table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto; text-align: center;"><tbody><tr><td style="text-align: center;"><a href="http://3.bp.blogspot.com/_rkBB8V8TgZY/TMXd0x2xILI/AAAAAAAAAUE/mUkw5ZYOdL4/s1600/IMG_7343.JPG" imageanchor="1" style="margin-left: auto; margin-right: auto;"><img border="0" height="240" src="http://3.bp.blogspot.com/_rkBB8V8TgZY/TMXd0x2xILI/AAAAAAAAAUE/mUkw5ZYOdL4/s320/IMG_7343.JPG" width="320" /></a></td></tr><tr><td class="tr-caption" style="text-align: center;">Fig 3. Top Front View.</td></tr></tbody></table><div><div class="separator" style="clear: both; text-align: center;"><s style="margin-left: 1em; margin-right: 1em;"></s></div></div><div><div><b><br /></b></div><div><b>Features</b></div><div><ul><li><span class="Apple-tab-span" style="white-space: pre;"> </span>A very small and efficient CPU with 16 bit registers.</li><li><span class="Apple-tab-span" style="white-space: pre;"> </span>Specially designed low power modes.</li><li><span class="Apple-tab-span" style="white-space: pre;">  </span>No special instructions are needed to put the device in a low-power mode. The mode is controlled by the respective bits in the status register. If an interrupt occurs, MSP430 awakens and returns back to the low power mode smoothly, after the particular interrupt has been serviced.&nbsp;</li><li><span class="Apple-tab-span" style="white-space: pre;">  </span>There is an internal <b>Digitally Controlled Oscillator</b> (<b>DCO</b>) which clocks the CPU. It is capable of restarting in 1 us, thus making the device to wake up from standby or return to low power mode very quickly.</li><li><span class="Apple-tab-span" style="white-space: pre;">  </span>There are various low power modes, differing in how much area of the device is active, and how long it takes to restart.</li><li><span class="Apple-tab-span" style="white-space: pre;">  </span>It is compatible with a wide range of peripherals used for various purpos</li><li><span class="Apple-tab-span" style="white-space: pre;">  </span>It can drive Liquid Crystal Displays (LCD) directly.</li><li><span class="Apple-tab-span" style="white-space: pre;">  </span>Some are classified as <b>Application Specific Standard Products</b> (<b>ASSP</b>), and used for specialized purposes.&nbsp;</li></ul></div></div>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Common Subexpression Elimination (CSE) by GCC]]></title>
    <link href="http://ejhari.github.io/blog/2010/10/21/cse-by-gcc/"/>
    <updated>2010-10-21T21:39:00+05:30</updated>
    <id>http://ejhari.github.io/blog/2010/10/21/cse-by-gcc</id>
    <content type="html"><![CDATA[<div style="margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;"><b><u>Test Program</u></b></div><div style="margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;"><br /></div><div style="margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;">&nbsp;&nbsp; &nbsp;main()</div><div style="margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;{</div><div style="margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; int i, j, k, r;</div><div style="margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;scanf(&#8220;%d%d&#8221;, &amp;i, &amp;j);</div><div style="margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;"><br /></div><div style="margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<b>k = i + j + 10;</b></div><div style="margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;"><b>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;r = i + j + 30;&nbsp;</b>&nbsp;</div><div style="margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;"><br /></div><div style="margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;printf(&#8220;%d %d %d\n&#8221;, k, r);</div><div style="margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;}</div><div style="margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;"><br /></div><div style="margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;"><b><u>Assemly Code</u></b></div><div style="margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;"><br /></div><div style="margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;">AT&amp;T format of assembly code is used.</div><div style="margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;">&nbsp;&nbsp;</div><div style="margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;">&nbsp;&nbsp; &nbsp;main:</div><div style="margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;pushl &nbsp; %ebp</div><div style="margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;movl &nbsp; &nbsp;%esp, %ebp</div><div style="margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;andl &nbsp; &nbsp;$-16, %esp</div><div style="margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;subl &nbsp; &nbsp;$32, %esp</div><div style="margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;leal &nbsp; &nbsp;24(%esp), %eax</div><div style="margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;movl &nbsp; &nbsp;%eax, 8(%esp)</div><div style="margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;leal &nbsp; &nbsp;28(%esp), %eax</div><div style="margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;movl &nbsp; &nbsp;%eax, 4(%esp)</div><div style="margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;movl &nbsp; &nbsp;$.LC0, (%esp)</div><div style="margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;call &nbsp; &nbsp;scanf</div><div style="margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;movl &nbsp; &nbsp;28(%esp), %edx</div><div style="margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;movl &nbsp; &nbsp;24(%esp), %eax</div><div style="margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<b>leal &nbsp; &nbsp;(%edx,%eax), %eax</b><br /><b><span class="Apple-style-span" style="font-weight: normal;"><b>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;addl &nbsp; &nbsp;$10, %eax</b></span></b></div><div style="margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;"><b>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;movl &nbsp; &nbsp;%eax, 20(%esp)</b></div><div style="margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;movl &nbsp; &nbsp;28(%esp), %edx</div><div style="margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;movl &nbsp; &nbsp;24(%esp), %eax</div><div style="margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<b>leal &nbsp; &nbsp;(%edx,%eax), %eax</b></div><div style="margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;"><b>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;addl &nbsp; &nbsp;$30, %eax</b></div><div style="margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;"><b>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;movl &nbsp; &nbsp;%eax, 16(%esp)</b></div><div style="margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;movl &nbsp; &nbsp;16(%esp), %eax</div><div style="margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;movl &nbsp; &nbsp;%eax, 8(%esp)</div><div style="margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;movl &nbsp; &nbsp;20(%esp), %eax</div><div style="margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;movl &nbsp; &nbsp;%eax, 4(%esp)</div><div style="margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;movl &nbsp; &nbsp;$.LC1, (%esp)</div><div style="margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;call &nbsp; &nbsp;printf</div><div><div style="margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;leave</div></div><div><div style="margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;ret</div></div><div style="margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;"><br /></div><div style="margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;">The two blocks in bold represents the evaluation of &#8216;k&#8217; and &#8216;r&#8217; in the test program respectively.</div><div style="margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;">The &#8217;<b><span class="Apple-style-span" style="font-weight: normal;"><b>leal &nbsp; &nbsp;(%edx,%eax), %eax&#8217;</b></span>&nbsp;</b>command adds the two values in the &#8216;edx&#8217; and &#8216;eax&#8217; and stores the result in &#8216;eax&#8217;. The &#8217;<b>addl&#8217;&nbsp;</b>command adds a constant to the value in the &#8216;eax&#8217;.</div><div style="margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;">Here,&nbsp;<b>both &#8216;leal&#8217; and &#8216;addl&#8217; are called two times</b>, for the evaluation of &#8216;k&#8217; and &#8216;r&#8217; respectively.</div><div style="margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;"><br /></div><div style="margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;">&nbsp;After optimization as:</div><div style="margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;">&nbsp;&nbsp; &nbsp;<b>gcc -S -O3 -fomit-frame-pointer opt2.c</b></div><div style="margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;"><b>&nbsp;&nbsp; &nbsp;less opt2.s</b></div><div style="margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;"><b><br /></b></div><div style="margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;"><b><span class="Apple-style-span" style="font-weight: normal;">&nbsp;&nbsp; &nbsp;main:</span><br /><span class="Apple-style-span" style="font-weight: normal;">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;pushl &nbsp; %ebp</span><br /><span class="Apple-style-span" style="font-weight: normal;">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;movl &nbsp; &nbsp;%esp, %ebp</span><br /><span class="Apple-style-span" style="font-weight: normal;">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;andl &nbsp; &nbsp;$-16, %esp</span><br /><span class="Apple-style-span" style="font-weight: normal;">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;subl &nbsp; &nbsp;$32, %esp</span><br /><span class="Apple-style-span" style="font-weight: normal;">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;leal &nbsp; &nbsp;24(%esp), %eax</span><br /><span class="Apple-style-span" style="font-weight: normal;">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;movl &nbsp; &nbsp;%eax, 8(%esp)</span><br /><span class="Apple-style-span" style="font-weight: normal;">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;leal &nbsp; &nbsp;28(%esp), %eax</span><br /><span class="Apple-style-span" style="font-weight: normal;">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;movl &nbsp; &nbsp;%eax, 4(%esp)</span><br /><span class="Apple-style-span" style="font-weight: normal;">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;movl &nbsp; &nbsp;$.LC0, (%esp)</span><br /><span class="Apple-style-span" style="font-weight: normal;">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;call &nbsp; &nbsp;scanf</span><br /><span class="Apple-style-span" style="font-weight: normal;">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span>movl &nbsp; &nbsp;24(%esp), %eax<br />&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;addl &nbsp; &nbsp;28(%esp), %eax<br />&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;movl &nbsp; &nbsp;$.LC1, (%esp)<br />&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;leal &nbsp; &nbsp;30(%eax), %edx<br />&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;addl &nbsp; &nbsp;$10, %eax<br /><span class="Apple-style-span" style="font-weight: normal;">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;movl &nbsp; &nbsp;%edx, 8(%esp)</span><br /><span class="Apple-style-span" style="font-weight: normal;">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;movl &nbsp; &nbsp;%eax, 4(%esp)</span><br /><span class="Apple-style-span" style="font-weight: normal;">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;call &nbsp; &nbsp;printf</span><br /><span class="Apple-style-span" style="font-weight: normal;">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;leave</span><br /><span class="Apple-style-span" style="font-weight: normal;">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;ret</span><br /><span class="Apple-style-span" style="font-weight: normal;"><br /></span><span class="Apple-style-span" style="font-weight: normal;">Here, what is seen to be done is:</span><br /><span class="Apple-style-span" style="font-weight: normal;">1)</span></b><b><span class="Apple-style-span" style="font-weight: normal;">&nbsp;<b><b></b></b></span></b><br /><b><span class="Apple-style-span" style="font-weight: normal;"><b><b><div style="display: inline !important;"><div style="display: inline !important;"><div style="display: inline !important;"><div style="display: inline !important; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;"><div style="display: inline !important;"><div style="display: inline !important;"><div style="display: inline !important;"><span class="Apple-style-span" style="font-weight: normal;">&#8216;i&#8217; in the test program stored in &#8216;eax&#8217;</span></div></div></div></div></div></div></div></b></b></span></b><br /></div><b><b></b></b><br /><b><b></b></b><br /><b><b><div style="display: inline !important;"><div style="display: inline !important;"><div style="display: inline !important;"><div style="display: inline !important;"><div style="display: inline !important;"><div style="display: inline !important; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;"><div style="display: inline !important;"><div style="display: inline !important;"><span class="Apple-style-span" style="font-weight: normal;">2) &#8216;j&#8217; added to &#8216;eax&#8217;</span></div></div></div></div></div></div></div></div></b></b><br /><b><b></b></b><br /><b><b></b></b><br /><b><b><div style="display: inline !important;"><div style="display: inline !important;"><div style="display: inline !important;"><div style="display: inline !important; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;"><div style="display: inline !important;"><span class="Apple-style-span" style="font-weight: normal;">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;</span>Now &#8216;eax&#8217; contains &#8216;i&#8217; + &#8216;j&#8217;<span class="Apple-style-span" style="font-weight: normal;">.</span></div></div></div></div></div></b></b><br /><b><b></b></b><br /><b><b><div style="display: inline !important;"><div style="display: inline !important; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;"><div style="display: inline !important;"><div style="display: inline !important;"><span class="Apple-style-span" style="font-weight: normal;">3) &#8216;r&#8217; is obtained as &#8221; 30 + the value in &#8216;eax&#8217; &#8221;</span></div></div></div></div></b></b><br /><br /><b><b></b></b><br /><b><b><div style="display: inline !important;"><div style="display: inline !important; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;"><div style="display: inline !important;"><span class="Apple-style-span" style="font-weight: normal;">4) &#8216;k&#8217; is obtained by adding 10 to the value in &#8216;eax&#8217;</span></div></div></div></b></b><br /><b><span class="Apple-style-span" style="font-weight: normal;"><b><b><div style="display: inline !important;"><div style="display: inline !important;"><div style="margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;"><span class="Apple-style-span" style="font-weight: normal;">Observation is:</span></div></div></div></b></b></span><span class="Apple-style-span" style="font-weight: normal;"><b><b><div style="display: inline !important;"><div style="display: inline !important;"><div style="margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;"><span class="Apple-style-span" style="font-weight: normal;">&nbsp;&nbsp; &nbsp; &nbsp;&nbsp;</span>&nbsp;&#8216;i&#8217; + &#8216;j&#8217; was evaluated only once !</div><div style="margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;"><br /></div></div></div></b></b></span><u>Common Subexpression Evaluation (CSE)</u><br /><span class="Apple-style-span" style="font-weight: normal;"></span><br /><span class="Apple-style-span" style="font-weight: normal;">As observed, CSE is an optimization technique employed by the compiler, when the same subexpression is present in more than one expressions.</span><br /><span class="Apple-style-span" style="font-weight: normal;"><br /></span><span class="Apple-style-span" style="font-weight: normal;">It is as if the subexpression is evaluated first, and the result is stored in a temporary variable. For all further calculations where this subexpression was a part originally, the value of this newly created temporary variable will be used.</span><br /><span class="Apple-style-span" style="font-weight: normal;"></span><span class="Apple-style-span" style="font-weight: normal;">In the test program used above, the so evaluated subexpression is &#8217;</span>&nbsp;i + j&nbsp;<span class="Apple-style-span" style="font-weight: normal;">&#8217;.</span><br /><span class="Apple-style-span" style="font-weight: normal;"><br /></span><span class="Apple-style-span" style="font-weight: normal;">Also,&nbsp;</span><span class="Apple-style-span">CSE is performed only when, in that environment,&nbsp;</span><span class="Apple-style-span">the cost to use such a temporary variable is lesser than the cost to perform the operations in the subexpression itself.</span><span class="Apple-style-span" style="font-weight: normal;">&nbsp;Here, the operation is &#8216;+&#8217;.&nbsp;</span></b>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Depicting Function Inlining by GCC]]></title>
    <link href="http://ejhari.github.io/blog/2010/10/19/depicting-function-inlining-by-gcc/"/>
    <updated>2010-10-19T17:40:00+05:30</updated>
    <id>http://ejhari.github.io/blog/2010/10/19/depicting-function-inlining-by-gcc</id>
    <content type="html"><![CDATA[<b><u>Inline Function</u></b><br /><br />In C, if a particular function used has only a few lines in its body, and if the optimization level is set to 03 (preferably), some unexpected changes can be observed about how gcc handles this function.<br /><br />What the compiler will do is that it replaces the call for this function, with the actual code of the function, called <b>inlining</b>.<br /><br /><b>The limit on the number of lines below which inlining is performed, strictly depends upon the gcc heuristics.</b><br /><br />This is not all. In &nbsp;the extreme case, if the small function mentioned above only does something like calculating a value after taking an input, then gcc will evaluate the function call, calculate the value, and directly paste it in the program instead of the function call itself.<br /><br />Sweet, isn&#8217;t it? &nbsp; <br /><br /><b><u>Test Program</u></b><br /><b><u><br /></u></b><br /><br />&nbsp;&nbsp; &nbsp;int sqr(int x)<br />&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;{<br />&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;int a;<br />&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;return x*x;<br />&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;}<br /><br />&nbsp;&nbsp; &nbsp;main()<br />&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;{<br />&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;printf(&#8220;%d\n&#8221;, sqr(10));<br />&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;}<br /><div><br /></div><div><div style="margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;"><b><u>Assembly Code</u></b></div></div><div><br /></div><div>To view the assembly code.</div><div>&nbsp;&nbsp; &nbsp;<b>gcc -S -fomit-frame-pointer opt1.c</b></div><br />&nbsp;&nbsp; &nbsp;<b>less opt1.s</b><br /><b><br /></b><br />The assembly code is:<br />&nbsp;&nbsp; &nbsp;sqr:<br />&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;subl &nbsp; &nbsp;$16, %esp<br />&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;movl &nbsp; &nbsp;20(%esp), %eax<br />&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;imull &nbsp; 20(%esp), %eax<br />&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;addl &nbsp; &nbsp;$16, %esp<br />&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;ret<br />&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />&nbsp;&nbsp; &nbsp;main:<br />&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;pushl &nbsp; %ebp<br />&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;movl &nbsp; &nbsp;%esp, %ebp<br />&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;andl &nbsp; &nbsp;$-16, %esp<br />&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<b>subl &nbsp; &nbsp;$16, %esp</b><br /><b>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;movl &nbsp; &nbsp;$10, (%esp)</b><br /><b>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;call &nbsp; &nbsp;sqr</b><br /><b>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;movl &nbsp; &nbsp;%eax, 4(%esp)</b><br />&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;movl &nbsp; &nbsp;$.LC0, (%esp)<br />&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;call &nbsp; &nbsp;printf<br />&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;leave<br />&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;ret<br />&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br />On optimization,<br /><br /><div style="margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;"></div><div><b>&nbsp;&nbsp; &nbsp;gcc -S -O3 -fomit-frame-pointer opt1.c</b></div><br /><div style="margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;<b>less opt1.s</b></div><br />The new code is:<br /><br />&nbsp;&nbsp; &nbsp;sqr:<br />&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;movl &nbsp; &nbsp;4(%esp), %eax<br />&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;imull &nbsp; %eax, %eax<br />&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;ret<br />&nbsp;&nbsp; &nbsp;main:<br />&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;pushl &nbsp; %ebp<br />&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;movl &nbsp; &nbsp;%esp, %ebp<br />&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;andl &nbsp; &nbsp;$-16, %esp<br />&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<b>subl &nbsp; &nbsp;$16, %esp</b><br /><b>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;movl &nbsp; &nbsp;$100, 4(%esp)</b><br />&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;movl &nbsp; &nbsp;$.LC0, (%esp)<br />&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;call &nbsp; &nbsp;printf<br />&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;leave<br />&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;ret<br /><br /><div><div style="margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;">Here, the function&nbsp;<b>sqr( )</b>&nbsp;does something very simple, and the input to the function is statically assigned. It means that the value of the input (<b>10</b>) will never change during runtime. Hence, the compiler will optimize the program even further, to the extreme that the square of 10 will be evaluated and the result pasted in the program instead of the original call to the function sqr( ). &nbsp;</div></div>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[User Mode Linux Built From Scratch !!!]]></title>
    <link href="http://ejhari.github.io/blog/2010/10/17/user-mode-linux-built-from-scratch/"/>
    <updated>2010-10-17T08:43:00+05:30</updated>
    <id>http://ejhari.github.io/blog/2010/10/17/user-mode-linux-built-from-scratch</id>
    <content type="html"><![CDATA[<b><u>Linux From Scratch</u></b><br /><blockquote>&#8220;Linux From Scratch (LFS) is a project that provides you with step-by-step instructions for building your own custom Linux system, entirely from source code.&#8221;</blockquote>Homepage is : <a href="http://www.linuxfromscratch.org/">http://www.linuxfromscratch.org/</a> .<br /><div><div><br /></div><b><u>Use Mode Linux</u></b><br /><blockquote>&#8220;User-Mode Linux is a safe, secure way of running Linux versions and Linux processes. Run buggy software, experiment with new Linux kernels or distributions, and poke around in the internals of Linux, all without risking your main Linux setup.</blockquote><blockquote>User-Mode Linux gives you a virtual machine that may have more hardware and software virtual resources than your actual, physical computer. Disk storage for the virtual machine is entirely contained inside a single file on your physical machine. You can assign your virtual machine only the hardware access you want it to have. With properly limited access, nothing you do on the virtual machine can change or damage your real computer, or its software.&#8221;</blockquote><div>Homepage is :&nbsp;<a href="http://user-mode-linux.sourceforge.net/">http://user-mode-linux.sourceforge.net/</a>&nbsp;.</div><div><br /><b><u>UML - The kernel on top of a kernel&nbsp;</u></b><br /><br />To get the complete idea, it is true that the UML kernel can be booted and shutdown from your Linux system, just like another application. It will not cause your Linux system to halt in any way.<br /><br />How is the required <b>privilege levels</b> setup for the UML kernel?<br />The privilege levels in a Linux system ranges from 0 (<b>ring 0</b>) to 3 (<b>ring 3</b>). Ring 0 gives you complete power. You can change the contents of any register, do anything. Ring 3 is the user mode. It also has the lowest privilege.<br /><br />This is the same in the UML kernel too.<br /><br /><b>Can a C code get privilege level 0</b>?<br />Yes it can. Through system calls. But it cannot be allowed just like that. Allowing a C code full control will be like allowing viruses to grow in Linux! The C code must be able to make system calls, and simultaneously not be the one who is in possession of the control flow.<br /><br />This is the specific design technique employed in Linux. When a system call occurs in a C code, there will be a switching from ring 0 to ring 3. It will be simultaneously accompanied with transfer of control from the C program to the Linux kernel. No hassle there.<br /><br />Thus, total safety is ensured.<br /><br />How is <b>the UML kernel design</b>ed then?<br />A Linux kernel comprises of two parts:<br />1) the hardware dependent part - specifically, everything inside the &#8217;<b>arch</b>&#8217;<br />&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;folder in the kernel source code.<br />2) others<br /><br />What is done in the UML kernel is that:<br />1) take away all the hardware dependent part of the kernel.<br />2) simply replace it with the system calls of the kernel layer below<br />&nbsp;&nbsp; &nbsp;it (pure C code).<br />&nbsp;&nbsp; &nbsp;(the UML kernel will behave just as an application)<br /><br />Consider a sample executable binary &#8216;a.out&#8217; compiled inside the UML kernel, from a sample file &#8216;a.c&#8217;.<br /><br /><table cellpadding="0" cellspacing="0" class="tr-caption-container" style="float: left; margin-right: 1em; text-align: left;"><tbody><tr><td style="text-align: center;"><a href="http://4.bp.blogspot.com/_rkBB8V8TgZY/TLpdcbjMslI/AAAAAAAAATA/n2V1nO6Y8B4/s1600/uml.png" imageanchor="1" style="clear: left; margin-bottom: 1em; margin-left: auto; margin-right: auto;"><img border="0" src="http://4.bp.blogspot.com/_rkBB8V8TgZY/TLpdcbjMslI/AAAAAAAAATA/n2V1nO6Y8B4/s1600/uml.png" /></a></td></tr><tr><td class="tr-caption" style="text-align: center;">Fig 1. The kernel layers</td></tr></tbody></table><br />a.out makes a system call<br />e.g. read( )<br /><br /><br />replace a.out&#8217;s call with the address of<br />its own&nbsp;read( )<br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br />The <b>mechanism</b>:<br />The UML kernel uses <b>ptrace( )</b>&nbsp;to freeze &#8216;a.out&#8217;, the moment it invokes a system call. Then, the address of this function call is replaced with a corresponding system call address that is part of the UML kernel itself.<br /><br />Everything works fine, in a cute way.<br /><br /><b><u>Compiling and Booting the UML kernel</u></b><br /><br />While compiling the kernel, just add an extra parameter &#8217;<b>ARCH=um</b>&#8217; to <b>all the steps</b> outlined in the Linux kernel README.<br />After compilation, an executable binary called &#8217;<b>linux</b>&#8217; will be created.<br /><br />Assuming &#8216;linux&#8217; is present in your current directory, to boot into the UML kernel give the command as:<br />&nbsp;&nbsp; &nbsp;<b>./linux ubda=&lt;&nbsp;path of the filesystem &gt;</b><path be="" filesystem="" of="" the="" to="" used=""></path><br /><br />where filesystem can be a physical partition, or one created with the <b>dd</b> and <b>mkfs</b>/<b>mke2fs</b> commands.<br /><br /><b><u>Some Snapshots</u></b><br /><b><u><br /></u></b></div><div><b>&#8216;Make&#8217;ing Glibc&nbsp;</b></div><div><div><table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto; text-align: center;"><tbody><tr><td style="text-align: center;"><a href="http://4.bp.blogspot.com/_rkBB8V8TgZY/TLna4GEUZrI/AAAAAAAAASc/UBfLNYeaAas/s1600/Screenshot-3.png" imageanchor="1" style="margin-left: auto; margin-right: auto;"><img border="0" height="179" src="http://4.bp.blogspot.com/_rkBB8V8TgZY/TLna4GEUZrI/AAAAAAAAASc/UBfLNYeaAas/s320/Screenshot-3.png" width="320" /></a></td></tr><tr><td class="tr-caption" style="text-align: center;">Fig 2. Running &#8216;make&#8217; for glibc</td></tr></tbody></table><b>&nbsp;&#8216;Configure&#8217;ing&nbsp;Bash</b><br /><table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto; text-align: center;"><tbody><tr><td style="text-align: center;"><a href="http://4.bp.blogspot.com/_rkBB8V8TgZY/TLnbAX7lGeI/AAAAAAAAASg/2E1eF3fsigw/s1600/Screenshot-4.png" imageanchor="1" style="margin-left: auto; margin-right: auto;"><img border="0" height="179" src="http://4.bp.blogspot.com/_rkBB8V8TgZY/TLnbAX7lGeI/AAAAAAAAASg/2E1eF3fsigw/s320/Screenshot-4.png" width="320" /></a></td></tr><tr><td class="tr-caption" style="text-align: center;">Fig 3. &#8216;Config&#8217;uring Bash</td></tr></tbody></table><b>Linguistic Perl</b>&nbsp;</div><div>&nbsp;&nbsp; &nbsp;The configuration settings for Perl, created by Larry Wall,&nbsp;was the most &#8220;linguistic&#8221; out of these! &nbsp;Some excerpts are:<br /><div class="separator" style="clear: both; text-align: center;"><a href="http://3.bp.blogspot.com/_rkBB8V8TgZY/TLpNhHRqUVI/AAAAAAAAASw/8a9uFFopJXE/s1600/perl1.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" height="40" src="http://3.bp.blogspot.com/_rkBB8V8TgZY/TLpNhHRqUVI/AAAAAAAAASw/8a9uFFopJXE/s320/perl1.png" width="320" /></a></div><br /><div class="separator" style="clear: both; text-align: center;"><a href="http://3.bp.blogspot.com/_rkBB8V8TgZY/TLpNiRSBdyI/AAAAAAAAAS0/fT7rHS29KNM/s1600/perl3.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" height="34" src="http://3.bp.blogspot.com/_rkBB8V8TgZY/TLpNiRSBdyI/AAAAAAAAAS0/fT7rHS29KNM/s320/perl3.png" width="320" /></a></div><br /><div class="separator" style="clear: both; text-align: center;"><a href="http://1.bp.blogspot.com/_rkBB8V8TgZY/TLpNkKvfvKI/AAAAAAAAAS4/Uvux1dY0TtA/s1600/perl2.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" height="38" src="http://1.bp.blogspot.com/_rkBB8V8TgZY/TLpNkKvfvKI/AAAAAAAAAS4/Uvux1dY0TtA/s320/perl2.png" width="320" /></a></div><br /><table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto; text-align: center;"><tbody><tr><td style="text-align: center;"><a href="http://4.bp.blogspot.com/_rkBB8V8TgZY/TLpNlFuONaI/AAAAAAAAAS8/tNwPzDwjC5s/s1600/perl4.png" imageanchor="1" style="margin-left: auto; margin-right: auto;"><img border="0" height="19" src="http://4.bp.blogspot.com/_rkBB8V8TgZY/TLpNlFuONaI/AAAAAAAAAS8/tNwPzDwjC5s/s320/perl4.png" width="320" /></a></td></tr><tr><td class="tr-caption" style="text-align: center;">Fig 4. Excerpts from the &#8216;configure&#8217; settings for Perl5</td></tr></tbody></table><b></b><br /><b><div style="display: inline !important; font-weight: normal; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;"><div style="display: inline !important;"><b>Man pages</b><br /><b></b><br /><b><div style="display: inline !important; font-weight: normal; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;"><div style="display: inline !important;"><b></b><br /><b><div style="display: inline !important; font-weight: normal; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;"><div style="display: inline !important;"><div style="display: inline !important;"><b>&nbsp;&nbsp; &nbsp;</b>These had a&nbsp;<b>&#8217;</b>make install&#8217; with one of the shortest SBU, and looked a bit of a variety too!</div></div></div></b></div></div></b></div></div></b><br /><table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto; text-align: center;"><tbody><tr><td style="text-align: center;"><a href="http://4.bp.blogspot.com/_rkBB8V8TgZY/TLnbJ4gRpQI/AAAAAAAAASs/zV-5WWd0CxE/s1600/Screenshot-2.png" imageanchor="1" style="margin-left: auto; margin-right: auto;"><img border="0" height="81" src="http://4.bp.blogspot.com/_rkBB8V8TgZY/TLnbJ4gRpQI/AAAAAAAAASs/zV-5WWd0CxE/s320/Screenshot-2.png" width="320" /></a></td></tr><tr><td class="tr-caption" style="text-align: center;">Fig 5. &#8216;make install&#8217; of man pages</td></tr></tbody></table><b>Bash without name !</b><br />&nbsp;&nbsp; &nbsp;During the process, there is a time when &#8216;chroot&#8217; is used to completely move into the LFS installation and start using the programs already setup inside it. &nbsp;At this point, the Bash will be setup without creating the <b>/etc/passwd</b> file. Now the Bash will say that <i><b>it has no name !</b></i><br /><table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto; text-align: center;"><tbody><tr><td style="text-align: center;"><a href="http://4.bp.blogspot.com/_rkBB8V8TgZY/TLnbFc85wQI/AAAAAAAAASk/s-h40s5wqNk/s1600/Screenshot.png" imageanchor="1" style="margin-left: auto; margin-right: auto;"><img border="0" height="115" src="http://4.bp.blogspot.com/_rkBB8V8TgZY/TLnbFc85wQI/AAAAAAAAASk/s-h40s5wqNk/s320/Screenshot.png" width="320" /></a></td></tr><tr><td class="tr-caption" style="text-align: center;">Fig 6. Bash without /etc/passwd</td></tr></tbody></table>After the Bash has been recompiled and installed properly with respect to the LFS system, and the /etc/passwd file created, the Bash prompt reverts back to normal.</div><div><table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto; text-align: center;"><tbody><tr><td style="text-align: center;"><a href="http://2.bp.blogspot.com/_rkBB8V8TgZY/TLnbHhBLSQI/AAAAAAAAASo/pJUGqQ5Mm4o/s1600/Screenshot-1.png" imageanchor="1" style="margin-left: auto; margin-right: auto;"><img border="0" height="50" src="http://2.bp.blogspot.com/_rkBB8V8TgZY/TLnbHhBLSQI/AAAAAAAAASo/pJUGqQ5Mm4o/s320/Screenshot-1.png" width="320" /></a></td></tr><tr><td class="tr-caption" style="text-align: center;">Fig 7. Bash after recompiling and creating /etc/passwd</td></tr></tbody></table><b>Booting in &#8230;</b></div><table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto; text-align: center;"><tbody><tr><td style="text-align: center;"><a href="http://4.bp.blogspot.com/_rkBB8V8TgZY/TLppN43P6YI/AAAAAAAAATQ/XsL1RWCwNOI/s1600/boot2.png" imageanchor="1" style="margin-left: auto; margin-right: auto;"><img border="0" height="162" src="http://4.bp.blogspot.com/_rkBB8V8TgZY/TLppN43P6YI/AAAAAAAAATQ/XsL1RWCwNOI/s320/boot2.png" width="320" /></a></td></tr><tr><td class="tr-caption" style="text-align: center;">Fig 8. Booting into the UML kernel</td></tr></tbody></table><div><b>Powering off &#8230;</b></div><div><table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto; text-align: center;"><tbody><tr><td style="text-align: center;"><a href="http://1.bp.blogspot.com/_rkBB8V8TgZY/TLplqQmjYOI/AAAAAAAAATI/Ig_fzO0AuQM/s1600/boot3.png" imageanchor="1" style="margin-left: auto; margin-right: auto;"><img border="0" height="162" src="http://1.bp.blogspot.com/_rkBB8V8TgZY/TLplqQmjYOI/AAAAAAAAATI/Ig_fzO0AuQM/s320/boot3.png" width="320" /></a></td></tr><tr><td class="tr-caption" style="text-align: center;">Fig 9. Powering off the UML kernel</td></tr></tbody></table></div></div></div>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The AVL Tree]]></title>
    <link href="http://ejhari.github.io/blog/2010/10/14/avl-tree/"/>
    <updated>2010-10-14T16:09:00+05:30</updated>
    <id>http://ejhari.github.io/blog/2010/10/14/avl-tree</id>
    <content type="html"><![CDATA[<b><u>BINARY TREE</u></b><br /><br />A binary tree is a tree data structure in which each node has atmost two child nodes. The child nodes may contain references to their parent nodes. There is a root node, which has atmost two children but no parent.<br /><div class="separator" style="clear: both; text-align: center;"><a href="http://3.bp.blogspot.com/_rkBB8V8TgZY/TLm1PZs75VI/AAAAAAAAARw/tOoYYMGiTsA/s1600/1.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" height="135" src="http://3.bp.blogspot.com/_rkBB8V8TgZY/TLm1PZs75VI/AAAAAAAAARw/tOoYYMGiTsA/s320/1.png" width="320" /></a></div><br />According to Graph Theory, a binary tree can be also said to be a connected, acyclic graph data structure, with a maximum degree of three for each vertex.<br /><br /><b><u>TERMS ASSOCIATED WITH A BINARY TREE</u></b><br /><ul><li>The root node of a tree is the node with no parents. There is at most one root node in a rooted tree.</li><li>A node with no children is called leaf node.</li><li>The depth of a node is the length of the path from the node to the root. All nodes at the same depth are said to be in the same level. The root node is at level 0.</li><li>The height of a tree is the length of the path from the node which has the highest depth, to the root node.</li><li>The children of the same parent are called siblings.</li><li>A node is an ancestor of another node, if it comes in the path traced from the other node to the root.</li><li>A node is the descendant of another node, if it is the child of the other node, at some level from it.</li><li>The size of a node is the number of descendants it has including itself.</li></ul><ol><li>A perfect binary tree is a full binary tree in which all leaves are at the same depth or same level. (This is ambiguously also called a complete binary tree.)</li><li>A complete binary tree is a binary tree in which every level, except possibly the last, is completely filled, and all nodes are as far left as possible.</li><li>A balanced binary tree is where the depth of all the leaves differs by at most 1. This depth is equal to the integer part of <span class="Apple-style-span" style="font-size: x-large;">log</span><span class="Apple-style-span" style="font-size: small;">2</span><span class="Apple-style-span" style="font-size: x-large;">(n)</span> where n is the number of nodes on the balanced tree.</li></ol><b><u>BINARY SEARCH TREE</u></b><br /><br />A binary search tree is a binary tree in which the numerical value of the data field of the left child is lesser than that of the parent, which is in turn lesser than that of the right child. In short,<br /><span class="Apple-tab-span" style="white-space: pre;"> </span>(data of left child) &lt; (data of parent) &lt; (data of right child)<span class="Apple-tab-span" style="white-space: pre;">  </span>[numerical value of data is taken]<br />For example,<br /><div class="separator" style="clear: both; text-align: center;"><a href="http://4.bp.blogspot.com/_rkBB8V8TgZY/TLm2WPg0lWI/AAAAAAAAAR0/tlRZuFYYG8g/s1600/2.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" height="84" src="http://4.bp.blogspot.com/_rkBB8V8TgZY/TLm2WPg0lWI/AAAAAAAAAR0/tlRZuFYYG8g/s320/2.png" width="320" /></a></div><span class="Apple-tab-span" style="white-space: pre;"> </span><br />Here, in both the trees, data is input in the same order, i.e, 34, 43, 56, 21. Searching in the binary tree is evidently very easier in the BST, hence the name binary search tree.<br /><br />Each node in a binary search tree can be represented by a structure in C, created with the &#8216;struct&#8217; keyword, typically named &#8216;node&#8217;. In the most simple case, the data field is taken as an integer. There are three pointers associated with each node, whose typical names can be parent, lchild and rchild, of type &#8216;struct node&#8217; itself. These three pointers also make the structure &#8216;node&#8217; a <b>self-referential data structure</b>. Obviously, the parent pointer in the structure representing the root node, will be NULL.<br /><br />The definition for each node will be: <br /><span class="Apple-tab-span" style="white-space: pre;">     </span><b>struct node {</b><br /><span class="Apple-tab-span" style="white-space: pre;"><b>         </b></span><b>int data;</b><br /><span class="Apple-tab-span" style="white-space: pre;"><b>         </b></span><b>struct node *parent;</b><br /><span class="Apple-tab-span" style="white-space: pre;"><b>         </b></span><b>struct node *lchild;</b><br /><span class="Apple-tab-span" style="white-space: pre;"><b>         </b></span><b>struct node *rchild;</b><br /><span class="Apple-tab-span" style="white-space: pre;"><b>     </b></span><b>};</b><br /><br />The names for the fields are self explanatory, and arbitrarily taken.<br />(The &#8216;parent&#8217; pointer points to the parent of a node. It is necessary in an AVL tree only.) <br /><br /><b><u>BASIC FUNCTIONS FOR THE BST</u></b><br /><br />Since the binary search tree is a dynamic data structure, the malloc() and free() C standard library functions are used to allocate memory for new nodes while insertion, and to deallocate memory while deleting nodes, respectively. Only the following basic functions are needed to implement the full functionalities associated with a BST.<br /><br /><b>Constructor</b><span class="Apple-tab-span" style="white-space: pre;">             </span>-&gt; For creating a new node in the BST<br /><b>Insert</b><span class="Apple-tab-span" style="white-space: pre;">                        </span>-&gt; For inserting the new node into the BST and<br />&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; setting up the links<br /><b>Traverse Inorder</b><span class="Apple-tab-span" style="white-space: pre;">    </span>-&gt; For inorder traversal through the BST<br />&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; (for each&nbsp;node, print <b>LnR</b>)<br /><b>Traverse Preorder</b><span class="Apple-tab-span" style="white-space: pre;">  </span>-&gt; For preorder traversal through the BST<br />&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; (for each node, print <b>nLR</b>)<br /><b>Traverse Postorder</b><span class="Apple-tab-span" style="white-space: pre;"> </span>-&gt; For postorder traversal through the BST<br />&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; (for each node, print <b>LRn</b>)<br /><b>Find</b><span class="Apple-tab-span" style="white-space: pre;">   </span>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -&gt; For returning the node whose data field is the<br />&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;given numerical value<br /><b>Delete</b><span class="Apple-tab-span" style="white-space: pre;">                        </span>-&gt; For deleting a node from the BST.<br /><span class="Apple-tab-span" style="white-space: pre;">   </span> <br /><span class="Apple-tab-span" style="white-space: pre;"> </span>where &#8217;<b>n</b>&#8217; denotes the current node, &#8217;<b>L</b>&#8217; the left child, and &#8217;<b>R</b>&#8217; the right child. (thanks to Shijith for this one &#8230;)<br /><br /><b>N.B.</b> For deletion, if the node is a leaf, just delete it. Otherwise, if the node<br />&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; has a right child, replace the&nbsp;node with its successor node in the<br />&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; inorder representation of the BST. Else, replace the node with&nbsp;its<br />&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; predecessor in the same inorder representation.<span class="Apple-tab-span" style="white-space: pre;"> </span><br /><br /><b><u>BALANCING A BST</u></b><br /><br />The BST seems efficient in searching for a particular data. But it is not so always. When there are large number of nodes, there is the possibility that a devastating situation, as shown below, may occur.<br /><div class="separator" style="clear: both; text-align: center;"><a href="http://1.bp.blogspot.com/_rkBB8V8TgZY/TLm29J_mhnI/AAAAAAAAAR4/z6H8kXmRgkI/s1600/3.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" height="110" src="http://1.bp.blogspot.com/_rkBB8V8TgZY/TLm29J_mhnI/AAAAAAAAAR4/z6H8kXmRgkI/s320/3.png" width="320" /></a></div><br />In the second BST, data was input in the order 21, 20, 34, 37, 43, 56. Hence, the structure. According to the BST terminology, a structure like this is said to be unbalanced.<br /><br /><b>N.B.</b> A BST is said to be balanced, when the depth of any two leaves in<br />&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; the BST differs atmost by 1.&nbsp;Also, a balanced tree will be<br />&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; theoretically more efficient in all&nbsp;situations, while an unbalanced tree<br />&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; will be not.<br /><br />Why is an <b>unbalanced BST</b> inefficient? For mainly two reasons.<br />1) The time complexity for searching some data values becomes much<br />&nbsp;&nbsp; &nbsp;greater than expected.&nbsp;For example, in the first BST, 43 can be found in<br />&nbsp;&nbsp; &nbsp;two steps of traversal. In the second one, it takes an&nbsp;unexpected 4 steps.<br />&nbsp;&nbsp; &nbsp;For very large BSTs, the time&nbsp;complexity increases drastically.<br />2) The lesser the number of levels in the tree, the more efficient the storage.<br />&nbsp;&nbsp; &nbsp;When operations like deletion are performed on large BSTs, there is<br />&nbsp;&nbsp; &nbsp;a high possibility that the&nbsp;actual addresses of the nodes are&nbsp;spread out<br />&nbsp;&nbsp; &nbsp;over a large&nbsp;area of the storage memory (secondary&nbsp;memory).<br /><br />How to <b>balance a BST</b>?<br />There are many techniques available, but in all of them, the simple rule is to keep the difference between the depth of any two leaves atmost 1. The BST can be balanced at a particular point in time as desired, or it can be done while insertion into and deletion from the BST. Such BSTs that do &#8220;balanced&#8221; insertion and &#8220;balanced&#8221; deletion are called <b>self-balancing binary search trees</b>.<br /><br /><b><u>THE AVL TREE</u></b><br /><br />The AVL tree is one of the many kinds of a self-balancing binary search tree. It was invented by <b>G. M. Adelson-Velskii</b> amd <b>E. M. Landis</b>.<br /><br /><b><u>Short Bio of the Inventors</u></b><br /><b>G. M. Adelson-Velskii</b><br />Georgy Maximovich Adelson-Velskii, was born on 8 January, 1922 in Samara, Russia. He is a Soviet mathematician and computer scientist. Along with E.M. Landis, he invented the AVL tree (&#8220;AV&#8221; in &#8220;AVL&#8221; tree stands for Adelson-Velskii) in 1962.<br />In 1965, he headed the development of a computer chess program, which evolved into Kaissa, the first world computer chess champion.<br />He currently resides in Ashdod, Israel.<br /><br /><b>E. M. Landis</b><br />Evgenii Mikhailovich Landis, was born on October 6, 1921, in Kharkiv, Ukrainian SSR, Soviet Union. He was a Soviet mathematician who worked mainly on partial differential equations. &nbsp;He studied and worked at the Moscow State University.<br />With Georgy Adelson-Velsky, he invented the AVL tree datastructure (&#8220;L&#8221; in &#8220;AVL&#8221; stands for Landis).<br />He died in Moscow on December 12, 1997.<br /><br /><b><u>The Technique</u></b><br /><br />The BST can be easily remodelled into an AVL tree by adding some extra functions that perform balanced insertion and balanced deletion. Some other helper functions that perform some trivial tasks are also needed. The balancing is done by a technique called &#8220;rotation&#8221;.<br /><br />What is <b>rotation</b>?<br />It can be best illustrated only pictorially. There are two ways to rotate.<br /><br />i. <b>Right Rotation</b> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br /><div class="separator" style="clear: both; text-align: center;"><a href="http://2.bp.blogspot.com/_rkBB8V8TgZY/TLm4DgUw6eI/AAAAAAAAAR8/gI2nhQZV24Y/s1600/4.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" height="98" src="http://2.bp.blogspot.com/_rkBB8V8TgZY/TLm4DgUw6eI/AAAAAAAAAR8/gI2nhQZV24Y/s320/4.png" width="320" /></a></div><span class="Apple-tab-span" style="white-space: pre;"> </span><br />What happened simply looks as if:<br />1) node 34 was kept fixed as a &#8220;pivot&#8221;.<br />2) 34&#8217;s right child was rotated clockwise about the pivot (node 34 here).<br />3) there is a change in some links of 34 and 43.<br /><br />On generalising,<br /><div class="separator" style="clear: both; text-align: center;"><a href="http://1.bp.blogspot.com/_rkBB8V8TgZY/TLm4UVpy3wI/AAAAAAAAASA/tecz4TPzLfM/s1600/5.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" height="108" src="http://1.bp.blogspot.com/_rkBB8V8TgZY/TLm4UVpy3wI/AAAAAAAAASA/tecz4TPzLfM/s320/5.png" width="320" /></a></div><br />ii.<b>Left Rotation</b> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br /><div class="separator" style="clear: both; text-align: center;"><a href="http://2.bp.blogspot.com/_rkBB8V8TgZY/TLm4cvI964I/AAAAAAAAASE/EUkuc4HT2c4/s1600/6.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" height="102" src="http://2.bp.blogspot.com/_rkBB8V8TgZY/TLm4cvI964I/AAAAAAAAASE/EUkuc4HT2c4/s320/6.png" width="320" /></a></div><br />What happened simply looks as if:<br />1) node 37 was kept fixed as a &#8220;pivot&#8221;.<br />2) 37&#8217;s left child was rotated anti-clockwise about the pivot (node 37 here).<br />3) there is a change in some links of 21 and 37.<br /><br />On generalising,<br /><div class="separator" style="clear: both; text-align: center;"><a href="http://3.bp.blogspot.com/_rkBB8V8TgZY/TLm4mftbpDI/AAAAAAAAASI/doaLwosZrz4/s1600/7.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" height="100" src="http://3.bp.blogspot.com/_rkBB8V8TgZY/TLm4mftbpDI/AAAAAAAAASI/doaLwosZrz4/s320/7.png" width="320" /></a></div><br /><b>N.B.</b> In both cases, the structure of the original BST will be changed to<br />&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; that after the rotation.&nbsp;The rule for a balanced tree will be obeyed<br />&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; in both the new structures.<br /><br />Above mentioned are the two ways to perform rotation. When and how many times to perform them depend on the actual arrangement of the nodes in the BST. <b>There are four distinguishable imbalance patterns which occur repeatedly in a BST strucuture</b>. These four patterns are recognized by finding out the &#8220;balancing factor&#8221; for each node. According to the balancing factor thus obtained, the proper sequence of rotations can be initiated.<br /><br />What is the <b>balancing factor</b>?<br />For any node in the BST, its balancing factor is given as:<br /><span class="Apple-tab-span" style="white-space: pre;">     </span><b>BF (node) = (height of its left subtree) - (height of its right subtree)</b><br /><br />(It can be taken the other way round too, but appropriate sign changes have to be made in the balancing factor of nodes.) &nbsp; <br /><div class="separator" style="clear: both; text-align: center;"><a href="http://4.bp.blogspot.com/_rkBB8V8TgZY/TLm40h3I3iI/AAAAAAAAASM/ygJ2ptdAVBI/s1600/8.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" height="159" src="http://4.bp.blogspot.com/_rkBB8V8TgZY/TLm40h3I3iI/AAAAAAAAASM/ygJ2ptdAVBI/s320/8.png" width="320" /></a></div><span class="Apple-tab-span" style="white-space: pre;"> </span>BF (node 43) = +2<br /><span class="Apple-tab-span" style="white-space: pre;"> </span>BF (node 34) = +1<br /><span class="Apple-tab-span" style="white-space: pre;"> </span>BF (node 21) = +1<br /><span class="Apple-tab-span" style="white-space: pre;"> </span>BF (node 20) = 0 (leaf)<br /><br />The balancing factor of any node in a balnced BST will be an integer, in the range -1 to +1, including them. If the balancing factor of a node is found to be -2 or +2, it indicates that the BST is unbalanced at that node.<br />Next, the proper imbalance pattern is identified. Once it is done, the appropriate sequence of rotations are performed. &nbsp; <br /><br /><b><u>THE FOUR CASES OF IMBALANCE</u></b><br /><br />For any number of nodes in a BST, only 4 patterns occur repeatedly. They are classified as the four cases according to which different sequences of left or right rotation or both must be performed. The four cases are:<br /><br />&nbsp;&nbsp; &nbsp;<b>LEGEND</b>:<br /><span class="Apple-tab-span"><span class="Apple-style-span" style="white-space: pre;"> <b>1</b>                       - node with BF +2 or -2, indicating need for rotation</span></span><br /><span class="Apple-tab-span" style="white-space: pre;"> </span><b>parent</b>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;- the parent link of node 1<br /><span class="Apple-tab-span" style="white-space: pre;"> </span><b>lroot </b>and<b> rroot</b> - the nodes which get &#8220;rotated&#8221; during each of the left<br />&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; or right&nbsp;rotations respectively<br /><span class="Apple-tab-span" style="white-space: pre;"> </span><b>pivot</b>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; - the pivot node in a rotation<br /><div class="separator" style="clear: both; text-align: center;"><a href="http://2.bp.blogspot.com/_rkBB8V8TgZY/TLm5iwHkSLI/AAAAAAAAASQ/Wg4UXNyXVhs/s1600/9.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" height="189" src="http://2.bp.blogspot.com/_rkBB8V8TgZY/TLm5iwHkSLI/AAAAAAAAASQ/Wg4UXNyXVhs/s320/9.png" width="320" /></a></div><br />From the above figure,<br /><b>LEFT - LEFT CASE</b> : BF of a node is +2, BF of its left child is +1 or 0<br /><b>LEFT - RIGHT CASE</b> : BF of a node is +2, BF of its left child is -1<br /><b>RIGHT - RIGHT CASE</b> : BF of a node is -2, BF of its right child is 0 or -1<br /><b>RIGHT - LEFT CASE</b> : BF of a node is -2, BF of its right child is +1<br /><br />Also,<br /><b>LEFT - LEFT CASE</b> : 1 right rotation<br /><b>LEFT - RIGHT CASE</b> : 1 left rotation, then 1 right rotation<br /><b>RIGHT - RIGHT CASE</b> : 1 left rotation<br /><b>RIGHT - LEFT CASE</b> : 1 right rotation, then 1 left rotation<br /><br /><b><u>AVL-SPECIFIC FUNCTIONS</u></b><br /><br /><b>Balancing Factor</b><span class="Apple-tab-span" style="white-space: pre;"> </span>-&gt; Finds the balancing factor for the given node.<br /><b>Left Rotation</b><span class="Apple-tab-span" style="white-space: pre;">       </span>-&gt; Perform left rotation, given a &#8220;pivot&#8221; and &#8220;lroot&#8221;.<br /><b>Right Rotation</b><span class="Apple-tab-span" style="white-space: pre;">    </span>-&gt; Perform right rotation, given a &#8220;pivot&#8221; and &#8220;rroot&#8221;.<br /><b>Balance</b><span class="Apple-tab-span" style="white-space: pre;">                </span>-&gt; Check balancing factor of given node. If the tree is<br />&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; unbalanced at this node,&nbsp;identify the imbalance<br />&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; pattern and perform rotation.<span class="Apple-tab-span" style="white-space: pre;"> </span><br /><b>Balanced Insert</b><span class="Apple-tab-span" style="white-space: pre;">   </span>-&gt; Insert a new node, then travel from its parent to the<br />&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; root, calling Balance() for&nbsp;each node in the path.<br /><b>Balanced Delete</b><span class="Apple-tab-span" style="white-space: pre;">  </span>-&gt; Delete the node, then travel from its parent to the<br />&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; root, calling Balance() for each&nbsp;node in the path.<br />&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; If the deleted node was not a leaf, the path starts<br />&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; from the replaced node itself.<br />&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <br /><b><u>Special Conditions to be Checked while Retracing in Balanced Deletion</u></b><br /><br />If at some node, its BF is:<br /><b>+1 or -1</b> : it indicates that the height of the subtree has remained unchanged,<br />&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;and retracing can stop.<br /><b>0</b> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;: height of the subtree has decreased by 1, and retracing needs to<br />&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;continue.<br /><b>+2 or -2</b> : needs rotation.<br />&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;If BF of the node after rotation is 0, continue retracing since<br />&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;height of this subtree has again decreased by 1.<br /><div><br /></div><b>N.B.</b>&nbsp;In insertion, if the BF of a node after rotation is 0, it indicates that the<br />&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; height of that subtree has remained unchanged, contrary to the similar<br />&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; situation while deletion.<br /><br /><b><u>CONCLUSION</u></b><br />Once the above extra functions are defined, the BST will be remodelled into an AVL tree.]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[HOWTO Smash Your C Stack and Learn More !!!]]></title>
    <link href="http://ejhari.github.io/blog/2010/10/05/howto-smash-your-c-stack-and-learn-more/"/>
    <updated>2010-10-05T19:32:00+05:30</updated>
    <id>http://ejhari.github.io/blog/2010/10/05/howto-smash-your-c-stack-and-learn-more</id>
    <content type="html"><![CDATA[<div dir="ltr" style="text-align: left;" trbidi="on"><div style="margin-bottom: 0cm;"></div><div style="margin-bottom: 0cm;">Stack is an abstract data type (ADT) in C. It is a memory visualization, where the memory contents are put inside one on top of the other. Just as a pile of plates. We have to take each plate rom the top, one by one. Hence, a stack can be also called a Last In First Out (LIFO) structure.</div><div style="margin-bottom: 0cm;"><br /></div><div style="margin-bottom: 0cm;">Its main uses include storing the current instruction address of a program when it calls another function, contents of relevant registers like the program counter, etc. Other uses of stack are seen while performing string operations, one of which I am going to use now.</div><div style="margin-bottom: 0cm;"><br /></div><div style="margin-bottom: 0cm;"><br /></div><div style="margin-bottom: 0cm;"><b>A simple implementation of builtin strcat()</b></div><div style="margin-bottom: 0cm;"><b>&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;</b></div><div style="margin-bottom: 0cm;">The program can be as follows:</div><table cellpadding="0" cellspacing="0" class="tr-caption-container" style="float: left; margin-right: 1em; text-align: left;"><tbody><tr><td style="text-align: center;"><a href="http://2.bp.blogspot.com/_rkBB8V8TgZY/TKsmyjnD-PI/AAAAAAAAAQ4/UxKTp_zuNA8/s1600/smash_stack.png" imageanchor="1" style="clear: left; margin-bottom: 1em; margin-left: auto; margin-right: auto;"><img border="0" src="http://2.bp.blogspot.com/_rkBB8V8TgZY/TKsmyjnD-PI/AAAAAAAAAQ4/UxKTp_zuNA8/s1600/smash_stack.png" height="162" width="320" /></a></td></tr><tr><td class="tr-caption" style="text-align: center;">Fig 1. The pseudo code for strcat()</td></tr></tbody></table><div style="margin-bottom: 0cm;"><br /></div><div style="margin-bottom: 0cm;"><br /></div><div style="margin-bottom: 0cm;"><br /></div><div style="margin-bottom: 0cm;"><br /></div><div style="margin-bottom: 0cm;"><br /></div><div style="margin-bottom: 0cm;"><br /></div><div style="margin-bottom: 0cm;"><br /></div><div style="margin-bottom: 0cm;"><br /></div><div style="margin-bottom: 0cm;"><br /></div><div style="margin-bottom: 0cm;"><br /></div><div style="margin-bottom: 0cm;"><br /><br /></div><div style="margin-bottom: 0cm;">Its time to play with the test data. Initially,</div><table cellpadding="0" cellspacing="0" class="tr-caption-container" style="float: left; margin-right: 1em; text-align: left;"><tbody><tr><td style="text-align: center;"><a href="http://2.bp.blogspot.com/_rkBB8V8TgZY/TKsnGPuf65I/AAAAAAAAAQ8/1pepXLB1icM/s1600/initial_test_data.png" imageanchor="1" style="clear: left; margin-bottom: 1em; margin-left: auto; margin-right: auto;"><img border="0" src="http://2.bp.blogspot.com/_rkBB8V8TgZY/TKsnGPuf65I/AAAAAAAAAQ8/1pepXLB1icM/s320/initial_test_data.png" height="110" width="320" /></a></td></tr><tr><td class="tr-caption" style="text-align: center;">Fig 2. Initial test data</td></tr></tbody></table><div style="margin-bottom: 0cm;"><br /></div><div style="margin-bottom: 0cm;"><br /></div><div style="margin-bottom: 0cm;"><br /></div><div style="margin-bottom: 0cm;"><br /></div><div style="margin-bottom: 0cm;"><br /></div><div style="margin-bottom: 0cm;"><br /></div><div style="margin-bottom: 0cm;"><br /></div><div style="margin-bottom: 0cm;"><br /><br /></div><div style="margin-bottom: 0cm;">The output will be printed graciously as,</div><table cellpadding="0" cellspacing="0" class="tr-caption-container" style="float: left; margin-right: 1em; text-align: left;"><tbody><tr><td style="text-align: center;"><a href="http://3.bp.blogspot.com/_rkBB8V8TgZY/TKsnVfWkykI/AAAAAAAAARA/feM6663SuSs/s1600/initial_td_output.png" imageanchor="1" style="clear: left; margin-bottom: 1em; margin-left: auto; margin-right: auto;"><img border="0" src="http://3.bp.blogspot.com/_rkBB8V8TgZY/TKsnVfWkykI/AAAAAAAAARA/feM6663SuSs/s320/initial_td_output.png" height="41" width="320" /></a></td></tr><tr><td class="tr-caption" style="text-align: center;">Fig 3. Initial output</td></tr></tbody></table><div style="margin-bottom: 0cm;"><br /></div><div style="margin-bottom: 0cm;"><br /></div><div style="margin-bottom: 0cm;"><br /></div><div style="margin-bottom: 0cm;"><br /></div><div style="margin-bottom: 0cm;"><br /><b><br /></b><br /><b>My name is &#8216;hari john kuriakose&#8217;</b></div><div style="margin-bottom: 0cm;"><b>&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;</b></div><div style="margin-bottom: 0cm;">It is only natural that I try to concatenate the two &#8216;halves&#8217;</div><div style="margin-bottom: 0cm;">of my name. So my new test data is,</div><table cellpadding="0" cellspacing="0" class="tr-caption-container" style="float: left; margin-right: 1em; text-align: left;"><tbody><tr><td style="text-align: center;"><a href="http://2.bp.blogspot.com/_rkBB8V8TgZY/TKsnu-qsfaI/AAAAAAAAARE/sWj310kS09c/s1600/new_test_data.png" imageanchor="1" style="clear: left; margin-bottom: 1em; margin-left: auto; margin-right: auto;"><img border="0" src="http://2.bp.blogspot.com/_rkBB8V8TgZY/TKsnu-qsfaI/AAAAAAAAARE/sWj310kS09c/s320/new_test_data.png" height="63" width="320" /></a></td></tr><tr><td class="tr-caption" style="text-align: center;">Fig 4. Test data 2</td></tr></tbody></table><div style="margin-bottom: 0cm;"><br /></div><div style="margin-bottom: 0cm;"><br /></div><div style="margin-bottom: 0cm;"><br /></div><div style="margin-bottom: 0cm;"><br /></div><div style="margin-bottom: 0cm;"><br /></div><div style="margin-bottom: 0cm;"><br /></div><div style="margin-bottom: 0cm;">Surprisingly, we get a peculiar output. What we see is,</div><table cellpadding="0" cellspacing="0" class="tr-caption-container" style="float: left; margin-right: 1em; text-align: left;"><tbody><tr><td style="text-align: center;"><a href="http://3.bp.blogspot.com/_rkBB8V8TgZY/TKsoJSj373I/AAAAAAAAARI/VQpP43GxIY8/s1600/new_output1.png" imageanchor="1" style="clear: left; margin-bottom: 1em; margin-left: auto; margin-right: auto;"><img border="0" src="http://3.bp.blogspot.com/_rkBB8V8TgZY/TKsoJSj373I/AAAAAAAAARI/VQpP43GxIY8/s320/new_output1.png" height="23" width="320" /></a></td></tr><tr><td class="tr-caption" style="text-align: center;">Fig 5. Output for test data 2 - part I</td></tr></tbody></table><div style="margin-bottom: 0cm;"><br /></div><div style="margin-bottom: 0cm;"><br /></div><div style="margin-bottom: 0cm;"><br /></div><div style="margin-bottom: 0cm;"><br /></div><table cellpadding="0" cellspacing="0" class="tr-caption-container" style="float: left; margin-right: 1em; text-align: left;"><tbody><tr><td style="text-align: center;"><a href="http://4.bp.blogspot.com/_rkBB8V8TgZY/TKsoehT7GJI/AAAAAAAAARM/Ygcutejp36k/s1600/new_output2.png" imageanchor="1" style="clear: left; margin-bottom: 1em; margin-left: auto; margin-right: auto;"><img border="0" src="http://4.bp.blogspot.com/_rkBB8V8TgZY/TKsoehT7GJI/AAAAAAAAARM/Ygcutejp36k/s320/new_output2.png" height="195" width="320" /></a></td></tr><tr><td class="tr-caption" style="text-align: center;">Fig 6. Output for test data 2 - part II</td></tr></tbody></table><div style="margin-bottom: 0cm;"><br /></div><div style="margin-bottom: 0cm;"><br /></div><div style="margin-bottom: 0cm;"><br /></div><div style="margin-bottom: 0cm;"><br /></div><div style="margin-bottom: 0cm;"><br /></div><div style="margin-bottom: 0cm;"><br /></div><div style="margin-bottom: 0cm;"><br /></div><div style="margin-bottom: 0cm;"><br /></div><div style="margin-bottom: 0cm;"><br /></div><div style="margin-bottom: 0cm;"><br /></div><div style="margin-bottom: 0cm;"><br /></div><div style="margin-bottom: 0cm;"><br /></div><div style="margin-bottom: 0cm;"><br /></div><div style="margin-bottom: 0cm;">Note that the length of destination (here its a) is 7. The stack will be smashed for the lengths 8 and 9 too, but not for other arbitrary lengths. Also, this behaviour is true only when length of the source (here its b) in all these cases is &gt;1.</div><table cellpadding="0" cellspacing="0" class="tr-caption-container" style="float: left; margin-right: 1em; text-align: left;"><tbody><tr><td style="text-align: center;"><a href="http://1.bp.blogspot.com/_rkBB8V8TgZY/TKso5PbDf6I/AAAAAAAAARQ/n0_xyvM8aQA/s1600/new_td_2.png" imageanchor="1" style="clear: left; margin-bottom: 1em; margin-left: auto; margin-right: auto;"><img border="0" src="http://1.bp.blogspot.com/_rkBB8V8TgZY/TKso5PbDf6I/AAAAAAAAARQ/n0_xyvM8aQA/s320/new_td_2.png" height="60" width="320" /></a></td></tr><tr><td class="tr-caption" style="text-align: center;">Fig 7. Test data 3</td></tr></tbody></table><br /><table cellpadding="0" cellspacing="0" class="tr-caption-container" style="float: left; margin-right: 1em; text-align: left;"><tbody><tr><td style="text-align: center;"><a href="http://3.bp.blogspot.com/_rkBB8V8TgZY/TKso82Kc70I/AAAAAAAAARU/tySjSHIt3X0/s1600/new_td_3.png" imageanchor="1" style="clear: left; margin-bottom: 1em; margin-left: auto; margin-right: auto;"><img border="0" src="http://3.bp.blogspot.com/_rkBB8V8TgZY/TKso82Kc70I/AAAAAAAAARU/tySjSHIt3X0/s320/new_td_3.png" height="62" width="320" /></a></td></tr><tr><td class="tr-caption" style="text-align: center;">Fig 8. Test data 4</td></tr></tbody></table><div style="margin-bottom: 0cm;"><br /></div><div style="margin-bottom: 0cm;"><br /></div><div style="margin-bottom: 0cm;"><br /></div><div style="margin-bottom: 0cm;"><br /></div><div style="margin-bottom: 0cm;"><br /></div><div style="margin-bottom: 0cm;"><br /></div><div style="margin-bottom: 0cm;"><br /></div><div style="margin-bottom: 0cm;"><br /></div><div style="margin-bottom: 0cm;"><br /></div><div style="margin-bottom: 0cm;"><br /><br />If the length of the source is 0 or 1, no smashing occurs.</div><div style="margin-bottom: 0cm;"><br /></div><div style="margin-bottom: 0cm;">Similarly, when concatenation is in the reverse order, the stack smashing willl occur only when the length of destination (here its &nbsp;b) is 7 and length of source (here its a) is &gt;1.</div><table cellpadding="0" cellspacing="0" class="tr-caption-container" style="float: left; margin-right: 1em; text-align: left;"><tbody><tr><td style="text-align: center;"><a href="http://1.bp.blogspot.com/_rkBB8V8TgZY/TKspSI5GhsI/AAAAAAAAARY/82zR0baPNXc/s1600/rev_cat.png" imageanchor="1" style="clear: left; margin-bottom: 1em; margin-left: auto; margin-right: auto;"><img border="0" src="http://1.bp.blogspot.com/_rkBB8V8TgZY/TKspSI5GhsI/AAAAAAAAARY/82zR0baPNXc/s320/rev_cat.png" height="62" width="320" /></a></td></tr><tr><td class="tr-caption" style="text-align: center;">Fig 9. Test data 5</td></tr></tbody></table><div style="margin-bottom: 0cm;"><br /></div><div style="margin-bottom: 0cm;"><br /></div><div style="margin-bottom: 0cm;"><br /></div><div style="margin-bottom: 0cm;"><br /></div><div style="margin-bottom: 0cm;"><br /></div><div style="margin-bottom: 0cm;"><br /></div><div style="margin-bottom: 0cm;">Here too, no smashing is observed when length of source is 0 or 1.</div><div style="margin-bottom: 0cm;"><br /></div><div style="margin-bottom: 0cm;"><br /></div><div style="margin-bottom: 0cm;"><b>Analyzing with gdb</b></div><div style="margin-bottom: 0cm;"><b>&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;</b></div><div style="margin-bottom: 0cm;">On analysis, the program works fine. There will be no problem till the very last line. Consider the test data is one&nbsp;among the problematic cases mentioned above. On exiting from main() after seeing the closing curly bracket, this odd behaviour suddenly springs up. But now, gdb informs that two more things have happened.</div><div style="margin-bottom: 0cm;">1. Program received signal <b>SIGABRT</b>, Aborted</div><div style="margin-bottom: 0cm;">2. 0x0012d422 in <b>__kernel_vsyscall ()</b></div><table cellpadding="0" cellspacing="0" class="tr-caption-container" style="float: left; margin-right: 1em; text-align: left;"><tbody><tr><td style="text-align: center;"><a href="http://2.bp.blogspot.com/_rkBB8V8TgZY/TKspiiS1PJI/AAAAAAAAARc/cpDwu_WP52w/s1600/gdb_output1.png" imageanchor="1" style="clear: left; margin-bottom: 1em; margin-left: auto; margin-right: auto;"><img border="0" src="http://2.bp.blogspot.com/_rkBB8V8TgZY/TKspiiS1PJI/AAAAAAAAARc/cpDwu_WP52w/s320/gdb_output1.png" height="48" width="320" /></a></td></tr><tr><td class="tr-caption" style="text-align: center;">Fig 10. gdb output - part I</td></tr></tbody></table><br /><table cellpadding="0" cellspacing="0" class="tr-caption-container" style="float: left; margin-right: 1em; text-align: left;"><tbody><tr><td style="text-align: center;"><a href="http://4.bp.blogspot.com/_rkBB8V8TgZY/TKspuZDU2gI/AAAAAAAAARg/Tjhnk9E3FJA/s1600/gdb_output2.png" imageanchor="1" style="clear: left; margin-bottom: 1em; margin-left: auto; margin-right: auto;"><img border="0" src="http://4.bp.blogspot.com/_rkBB8V8TgZY/TKspuZDU2gI/AAAAAAAAARg/Tjhnk9E3FJA/s320/gdb_output2.png" height="168" width="320" /></a></td></tr><tr><td class="tr-caption" style="text-align: center;">Fig 11. gdb output - part II</td></tr></tbody></table><div style="margin-bottom: 0cm;"><br /></div><div style="margin-bottom: 0cm;"><br /></div><div style="margin-bottom: 0cm;"><br /></div><div style="margin-bottom: 0cm;"><br /></div><div style="margin-bottom: 0cm;"><br /></div><div style="margin-bottom: 0cm;"><br /></div><div style="margin-bottom: 0cm;"><br /></div><div style="margin-bottom: 0cm;"><br /></div><div style="margin-bottom: 0cm;"><br /></div><div style="margin-bottom: 0cm;"><br /></div><div style="margin-bottom: 0cm;"><br /></div><div style="margin-bottom: 0cm;"><br /></div><div style="margin-bottom: 0cm;"><br /></div><div style="margin-bottom: 0cm;"><br /></div><div style="margin-bottom: 0cm;"><br /><br />This, is interesting. What are these things?</div><div style="margin-bottom: 0cm;"><br /></div><div style="margin-bottom: 0cm;"><br /></div><div style="margin-bottom: 0cm;"><b>SIGABRT</b></div><div style="margin-bottom: 0cm;"><b>&#8212;&#8212;&#8212;&#8212;&#8211;</b></div><div style="margin-bottom: 0cm;">It is a signal. It is defined in signal.h . It is used to tell a program to abort. Its signal number is 6.</div><div style="margin-bottom: 0cm;"><br /></div><div style="margin-bottom: 0cm;">On some platforms, SIGIOT (signal for I/O transfer) is taken as a synoym for SIGABRT. It is also the signal a process sends itself when it calls the abort libc function, defined in stdlib.h . The <b>SA_SIGINFO</b> macro would be interesting too.</div><div style="margin-bottom: 0cm;"><br /></div><div style="margin-bottom: 0cm;">SIGABRT can be caught, but it cannot be trapped. When the signal handler returns, all streams must be flushed out and the program terminated. Hence, an abort function will not return. This signal is used to indicate fatal conditions in the supporting libraries, when the program cannot continue, but the main() can cleanup while it exits. Typical example is, on the failure of an assertion.</div><div style="margin-bottom: 0cm;"><br /></div><div style="margin-bottom: 0cm;">If a SIGINFO is called after the occurrence of a SIGABRT, a pointer to a structure of type ABRT_t will be returned. This strcuture contains a printable form of the <b>ABEND</b> code. Since SIGABRT cannot return to the point of interrupt, an attempt to do so will reissue a ABEND.</div><div style="margin-bottom: 0cm;"><br /></div><div style="margin-bottom: 0cm;"><br /></div><div style="margin-bottom: 0cm;"><b>__kernel_vsyscall()</b></div><div style="margin-bottom: 0cm;"><b>&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;-</b></div><div style="margin-bottom: 0cm;">This is the method used by <b>linuxgate.so</b> (a part of the kernel) to make fast system calls, usually using <b>sysenter</b>.</div><div style="margin-bottom: 0cm;"><br /></div><div style="margin-bottom: 0cm;">The linuxgate.so is a <b>V</b>irtual <b>D</b>ynamically-linked <b>S</b>hared <b>O</b>bject (<b>VDSO</b>), a kernel-provided shared library that helps userspace perform a few kernel actions without the overhead of a system call, as well as automatically choosing the most efficient syscall mechanism. Also called the “<b>vsyscall page</b>”.</div><div style="margin-bottom: 0cm;">This is as per the <a href="http://kernelnewbies.org/KernelGlossary">KernelGlossary</a>.</div><div style="margin-bottom: 0cm;"><br /></div><div style="margin-bottom: 0cm;">Or, the linux gate is the actual interface between the kernel and the user space. Originally it was named linux-vsyscall.so.1, but&nbsp;to make it more meaningful, it was changed.</div><div style="margin-bottom: 0cm;"><br /></div><div style="margin-bottom: 0cm;">To view the linuxgate.so, print the shared library dependencies for the shell.</div><div style="margin-bottom: 0cm;">&nbsp;&nbsp; &nbsp;<b><i>ldd /bin/sh</i></b></div><table cellpadding="0" cellspacing="0" class="tr-caption-container" style="float: left; margin-right: 1em; text-align: left;"><tbody><tr><td style="text-align: center;"><a href="http://2.bp.blogspot.com/_rkBB8V8TgZY/TKsutxXuN0I/AAAAAAAAARs/j91fmJGmzmw/s1600/linux_gate.png" imageanchor="1" style="clear: left; margin-bottom: 1em; margin-left: auto; margin-right: auto;"><img border="0" src="http://2.bp.blogspot.com/_rkBB8V8TgZY/TKsutxXuN0I/AAAAAAAAARs/j91fmJGmzmw/s320/linux_gate.png" height="48" width="320" /></a></td></tr><tr><td class="tr-caption" style="text-align: center;">Fig 12. The Linux gate</td></tr></tbody></table><div style="margin-bottom: 0cm;"><br /></div><div style="margin-bottom: 0cm;"><br /></div><div style="margin-bottom: 0cm;"><br /></div><div style="margin-bottom: 0cm;"><br /></div><div style="margin-bottom: 0cm;"><br /></div><div style="margin-bottom: 0cm;">But the address you see there, does not actually exist. It is just a shared object used by kernel to facilitate a VDSO. To know whether your kernel is VDSO enabled, you can see the contents of a file in /proc, which contains the currently mapped memory regions and their access permissions.</div><div style="margin-bottom: 0cm;">&nbsp;&nbsp; &nbsp;<b><i>cat /proc/self/maps</i></b></div><div style="margin-bottom: 0cm;"><b><i><br /></i></b></div><table cellpadding="0" cellspacing="0" class="tr-caption-container" style="float: left; margin-right: 1em; text-align: left;"><tbody><tr><td style="text-align: center;"><a href="http://2.bp.blogspot.com/_rkBB8V8TgZY/TKsqbnKIYpI/AAAAAAAAARk/js9p1O-8ggE/s1600/cat_maps_1.png" imageanchor="1" style="clear: left; margin-bottom: 1em; margin-left: auto; margin-right: auto;"><img border="0" src="http://2.bp.blogspot.com/_rkBB8V8TgZY/TKsqbnKIYpI/AAAAAAAAARk/js9p1O-8ggE/s320/cat_maps_1.png" height="86" width="320" /></a></td></tr><tr><td class="tr-caption" style="text-align: center;">Fig 13. cat /proc/self/maps - part I</td></tr></tbody></table><br /><table cellpadding="0" cellspacing="0" class="tr-caption-container" style="float: left; margin-right: 1em; text-align: left;"><tbody><tr><td style="text-align: center;"><a href="http://4.bp.blogspot.com/_rkBB8V8TgZY/TKsqzIeUm0I/AAAAAAAAARo/UkC66GfZdP8/s1600/cat_maps_2.png" imageanchor="1" style="clear: left; margin-bottom: 1em; margin-left: auto; margin-right: auto;"><img border="0" src="http://4.bp.blogspot.com/_rkBB8V8TgZY/TKsqzIeUm0I/AAAAAAAAARo/UkC66GfZdP8/s320/cat_maps_2.png" height="99" width="320" /></a></td></tr><tr><td class="tr-caption" style="text-align: center;">Fig 14. cat /proc/self/maps - part II</td></tr></tbody></table><div style="margin-bottom: 0cm;"><br /></div><div style="margin-bottom: 0cm;"><br /></div><div style="margin-bottom: 0cm;"><br /></div><div style="margin-bottom: 0cm;"><br /></div><div style="margin-bottom: 0cm;"><br /></div><div style="margin-bottom: 0cm;"><br /></div><div style="margin-bottom: 0cm;"><br /></div><div style="margin-bottom: 0cm;"><br /></div><div style="margin-bottom: 0cm;"><br /></div><div style="margin-bottom: 0cm;"><br /></div><div style="margin-bottom: 0cm;"><br /></div><div style="margin-bottom: 0cm;"><br /></div><div style="margin-bottom: 0cm;"><br /></div><div style="margin-bottom: 0cm;"><br />In the kernel, all processes will therefore share this same object, which enables us to do a simple trick with the convert and copy ability in linux, the <b>dd</b> tool. On successive <b>objdump</b>, the &#8216;__kernel_vsyscall&#8217; can be spotted. On further objdumping, the underlying &#8216;sysenter&#8217; can be seen too.</div><div style="margin-bottom: 0cm;"><br /></div><div style="margin-bottom: 0cm;">What are &#8217;<b>system calls</b>&#8217;?</div><div style="margin-bottom: 0cm;">They are the means by which a user can access the services offered by a kernel. Those services include storage, process management, etc. In C, the <b>stubs</b> are the interface to invoke system calls.</div><div style="margin-bottom: 0cm;"><br /></div><div style="margin-bottom: 0cm;">Is that all?</div><div style="margin-bottom: 0cm;">No. In a system call, the actual code running is a part of the kernel itself. It runs with a privilege level 0 (<b>CPL 0</b>), which is the highest level in x86 architecture. It is termed &#8217;<b>ring 0</b>&#8217;. All user processes run in ring 3. Thus, to sucessfully make a system call, we have to call a ring 0 code from a ring 3 code.</div><div style="margin-bottom: 0cm;"><br /></div><div style="margin-bottom: 0cm;">What are these &#8217;<b>faster system calls</b>&#8217; ?</div><div style="margin-bottom: 0cm;">Originally, in the x86 architecture, all system calls were implemented as interrupts. Linux and Unix-like kernels used <b>0x80</b>. For the newer members in the x86 family, it was observed that interrupting via 0x80 was getting much slower! A Pentium IV was more slower than a Pentium III in this particular respect. Intel recognized this problem early, and introduced two instructions, &#8216;sysenter&#8217; and &#8216;sysexit&#8217;. But the hardware bugs were so plenty, they could not boast about it.</div><div style="margin-bottom: 0cm;"><br /></div><div style="margin-bottom: 0cm;">That was until <b>Linus Torvalds</b> came along. He was very skillful in manipulating the fact that the return point of &#8216;sysenter&#8217; instruction is totally arbitrary, and he wrote some highly tricky code that ultimately came out as the solution!!! Anyways, he himself says his final solution is <a href="http://lkml.org/lkml/2002/12/18/218">disgusting</a>!</div><div style="margin-bottom: 0cm;"><br /></div><div style="margin-bottom: 0cm;">For the techier techies,&nbsp;</div><div style="margin-bottom: 0cm;">[1] <a href="http://siyobik.info/index.php?module=x86&amp;id=313">X86 Instruction Set Reference For SYSENTER</a></div><div style="margin-bottom: 0cm;">[2] <a href="http://www.trilithium.com/johan/2005/08/linux-gate/">Scatter/ Gather Thoughts</a></div><div style="margin-bottom: 0cm;">[3] <a href="http://articles.manugarg.com/systemcallinlinux2_6.html">Sysenter Based System Call Mechanism in Linux 2.6</a></div><div style="margin-bottom: 0cm;"><br /><br /></div><div style="margin-bottom: 0cm;"><b>N. B.&nbsp;</b></div><div style="margin-bottom: 0cm;"><b>&#8212;&#8212;&#8212;</b></div><div style="margin-bottom: 0cm;">The pseudo code can be tweaked slightly and made theoretically correct.</div></div>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Elementary Analysis of TinyPython Virtual Machine v1.1]]></title>
    <link href="http://ejhari.github.io/blog/2010/09/29/elementary-analysis-of-tinypython_29/"/>
    <updated>2010-09-29T14:04:00+05:30</updated>
    <id>http://ejhari.github.io/blog/2010/09/29/elementary-analysis-of-tinypython_29</id>
    <content type="html"><![CDATA[<div style="margin-bottom: 0cm; orphans: 2; widows: 2;"><span style="color: black;"><span style="font-style: normal;"><u><b><span class="Apple-style-span" style="font-family: inherit;">OVERVIEW</span></b></u></span></span></div><div style="font-style: normal; font-weight: normal; margin-bottom: 0cm; orphans: 2; widows: 2;"><span style="color: black;"><span class="Apple-style-span" style="font-family: inherit;">TinyPython is a minimalist implementation of Python in 64K</span></span></div><div style="font-style: normal; font-weight: normal; margin-bottom: 0cm; orphans: 2; widows: 2;"><span style="color: black;"><span class="Apple-style-span" style="font-family: inherit;">code, originally created by Phil Hassey. He blogs at:</span></span></div><div style="margin-bottom: 0cm; orphans: 2; widows: 2;"><a href="http://philhassey.com/blog/"><span class="Apple-style-span" style="font-family: inherit;">http://philhassey.com/blog/</span></a><span style="color: black;"><span style="font-style: normal;"><span style="font-weight: normal;"><span class="Apple-style-span" style="font-family: inherit;">&nbsp;.</span></span></span></span></div><div style="margin-bottom: 0cm; orphans: 2; widows: 2;"><span class="Apple-style-span" style="font-family: inherit;"><br /></span></div><div style="font-style: normal; font-weight: normal; margin-bottom: 0cm; orphans: 2; widows: 2;"><span style="color: black;"><span class="Apple-style-span" style="font-family: inherit;">It is a <b>parser and byte-code compiler</b> written in</span></span></div><div style="font-style: normal; font-weight: normal; margin-bottom: 0cm; orphans: 2; widows: 2;"><span style="color: black;"><span class="Apple-style-span" style="font-family: inherit;">TinyPython itself. It is also fully bootstrapped in the sense that</span></span></div><div style="font-style: normal; font-weight: normal; margin-bottom: 0cm; orphans: 2; widows: 2;"><span style="color: black;"><span class="Apple-style-span" style="font-family: inherit;">initially, TinyPy converts a Python script (<b>.py</b>) into a special</span></span></div><div style="font-style: normal; font-weight: normal; margin-bottom: 0cm; orphans: 2; widows: 2;"><span style="color: black;"><span class="Apple-style-span" style="font-family: inherit;">TinyPy byte-code format (<b>.tpc</b>), and this generated code is then</span></span></div><div style="font-style: normal; font-weight: normal; margin-bottom: 0cm; orphans: 2; widows: 2;"><span style="color: black;"><span class="Apple-style-span" style="font-family: inherit;">passed into a subset of the TinyPython source code called the</span></span></div><div style="font-style: normal; font-weight: normal; margin-bottom: 0cm; orphans: 2; widows: 2;"><span style="color: black;"><span class="Apple-style-span" style="font-family: inherit;"><b>Virtual Machine</b>, where the actual execution takes place.</span></span></div><div style="margin-bottom: 0cm; orphans: 2; widows: 2;"><span class="Apple-style-span" style="font-family: inherit;"><br /></span></div><div style="font-style: normal; font-weight: normal; margin-bottom: 0cm; orphans: 2; widows: 2;"><span style="color: black;"><span class="Apple-style-span" style="font-family: inherit;">One can even extend the idea that if the VM is compiled into a</span></span></div><div style="font-style: normal; font-weight: normal; margin-bottom: 0cm; orphans: 2; widows: 2;"><span style="color: black;"><span class="Apple-style-span" style="font-family: inherit;">low-level format adaptable to a particular microcontroller,</span></span></div><div style="font-style: normal; font-weight: normal; margin-bottom: 0cm; orphans: 2; widows: 2;"><span style="color: black;"><span class="Apple-style-span" style="font-family: inherit;">then the VM will reside inside that chip, and any .tpc file can</span></span></div><div style="font-style: normal; font-weight: normal; margin-bottom: 0cm; orphans: 2; widows: 2;"><span style="color: black;"><span class="Apple-style-span" style="font-family: inherit;">be downloaded into the chip as its input.</span></span></div><div style="margin-bottom: 0cm; orphans: 2; widows: 2;"><span class="Apple-style-span" style="font-family: inherit;"><br /></span></div><div style="font-style: normal; font-weight: normal; margin-bottom: 0cm; orphans: 2; widows: 2;"><span style="color: black;"><span class="Apple-style-span" style="font-family: inherit;">A basic analysis of source code for TinyPy v1.1, excluding the</span></span></div><div style="font-style: normal; font-weight: normal; margin-bottom: 0cm; orphans: 2; widows: 2;"><span style="color: black;"><span class="Apple-style-span" style="font-family: inherit;">byte-code compilation phase, was performed. The focus was</span></span></div><div style="font-style: normal; font-weight: normal; margin-bottom: 0cm; orphans: 2; widows: 2;"><span style="color: black;"><span class="Apple-style-span" style="font-family: inherit;">on the working of the TinyPy Virtual Machine, which actually</span></span></div><div style="font-style: normal; font-weight: normal; margin-bottom: 0cm; orphans: 2; widows: 2;"><span style="color: black;"><span class="Apple-style-span" style="font-family: inherit;">executes the byte-code.</span></span></div><div style="margin-bottom: 0cm; orphans: 2; widows: 2;"><span class="Apple-style-span" style="font-family: inherit;"><br /></span></div><div style="font-style: normal; font-weight: normal; margin-bottom: 0cm; orphans: 2; widows: 2;"><span style="color: black;"><span class="Apple-style-span" style="font-family: inherit;">The TinyPython source code used was downloaded from:</span></span></div><div style="margin-bottom: 0cm; orphans: 2; widows: 2;"><a href="http://code.google.com/p/tinypy/downloads/list"><span class="Apple-style-span" style="font-family: inherit;">http://code.google.com/p/tinypy/downloads/list</span></a><span style="color: black;"><span style="font-style: normal;"><span style="font-weight: normal;"><span class="Apple-style-span" style="font-family: inherit;">&nbsp;.</span></span></span></span></div><div style="margin-bottom: 0cm; orphans: 2; widows: 2;"><span class="Apple-style-span" style="font-family: inherit;"><br /></span></div><div style="font-style: normal; font-weight: normal; margin-bottom: 0cm; orphans: 2; widows: 2;"><span style="color: black;"><u><span class="Apple-style-span" style="font-family: inherit;">BUILDING TINYPY</span></u></span></div><div style="font-style: normal; font-weight: normal; margin-bottom: 0cm; orphans: 2; widows: 2;"><span style="color: black;"><span class="Apple-style-span" style="font-family: inherit;">Initially, the file listing will look like the following figure:</span></span></div><table border="0" cellpadding="0" cellspacing="0" style="width: 322px;"><col width="322"></col>  <tbody><tr>   <td width="322"><div align="CENTER"><a href="http://3.bp.blogspot.com/_rkBB8V8TgZY/TKIDZbRC9pI/AAAAAAAAAPY/Q_4eRXMcEtY/s1600/Screenshot-1.png"><span class="Apple-style-span" style="font-family: inherit;"><img align="BOTTOM" border="0" height="146" name="graphics1" src="http://3.bp.blogspot.com/_rkBB8V8TgZY/TKIDZbRC9pI/AAAAAAAAAPY/Q_4eRXMcEtY/s320/Screenshot-1.png" width="320" /></span></a></div></td>  </tr><tr>   <td width="322"><div align="CENTER" style="border: none; padding: 0cm;"><span style="font-size: x-small;"><span class="Apple-style-span" style="font-family: inherit;">Fig    1. TinyPy source file contents</span></span></div></td>  </tr></tbody></table><div style="margin-bottom: 0cm; orphans: 2; widows: 2;"><span class="Apple-style-span" style="font-family: inherit;"><br /></span></div><div style="margin-bottom: 0cm; orphans: 2; widows: 2;"><span class="Apple-style-span" style="font-family: inherit;">&nbsp; &nbsp;</span><span style="color: black;"><span style="font-style: normal;"><span style="font-weight: normal;"><span class="Apple-style-span" style="font-family: inherit;">Initially, the &#8216;build&#8217; folder will be empty. The &#8216;doc&#8217;,</span></span></span></span></div><div style="font-style: normal; font-weight: normal; margin-bottom: 0cm; orphans: 2; widows: 2;"><span style="color: black;"><span class="Apple-style-span" style="font-family: inherit;">&#8216;examples&#8217;&nbsp;and&nbsp;&#8216;modules&#8217; folder may or may not contain</span></span></div><div style="font-style: normal; font-weight: normal; margin-bottom: 0cm; orphans: 2; widows: 2;"><span style="color: black;"><span class="Apple-style-span" style="font-family: inherit;">any documents,&nbsp;Python scripts&nbsp;and batteries (or modules)</span></span></div><div style="font-style: normal; font-weight: normal; margin-bottom: 0cm; orphans: 2; widows: 2;"><span style="color: black;"><span class="Apple-style-span" style="font-family: inherit;">respectively,&nbsp;depending on the downloaded package.</span></span></div><div style="font-style: normal; font-weight: normal; margin-bottom: 0cm; orphans: 2; widows: 2;"><span style="color: black;"><span class="Apple-style-span" style="font-family: inherit;">The LICENSE.txt,&nbsp;README.txt, CHANGES.txt and</span></span></div><div style="font-style: normal; font-weight: normal; margin-bottom: 0cm; orphans: 2; widows: 2;"><span style="color: black;"><span class="Apple-style-span" style="font-family: inherit;">ROADMAP.txt describe the essential details of&nbsp;TinyPy.</span></span></div><div style="font-style: normal; font-weight: normal; margin-bottom: 0cm; orphans: 2; widows: 2;"><span style="color: black;"><span class="Apple-style-span" style="font-family: inherit;">The&nbsp;&#8216;setup.py&#8217; contain the&nbsp;initial code to build&nbsp;the TinyPy</span></span></div><div style="font-style: normal; font-weight: normal; margin-bottom: 0cm; orphans: 2; widows: 2;"><span style="color: black;"><span class="Apple-style-span" style="font-family: inherit;">from scratch. At the terminal,&nbsp;type as follows:</span></span></div><div style="margin-bottom: 0cm; orphans: 2; widows: 2;"><span style="color: black;"><span class="Apple-style-span" style="font-family: inherit;">&nbsp;&nbsp; &nbsp;</span><i><b><span class="Apple-style-span" style="font-family: inherit;">python setup.py linux</span></b></i></span></div><div style="margin-bottom: 0cm; orphans: 2; widows: 2;"><span class="Apple-style-span" style="font-family: inherit;"><br /></span></div><div style="margin-bottom: 0cm; orphans: 2; widows: 2;"><span style="color: black;"><span style="font-style: normal;"><span style="font-weight: normal;"><span class="Apple-style-span" style="font-family: inherit;">It is implied that you need a Python interpreter available in&nbsp;</span></span></span><i><b><span class="Apple-style-span" style="font-family: inherit;"><br /></span> </b></i><span style="font-style: normal;"><span style="font-weight: normal;"><span class="Apple-style-span" style="font-family: inherit;">your system. The &#8216;linux&#8217; option is to specify that the code will</span></span></span></span></div><div style="margin-bottom: 0cm; orphans: 2; widows: 2;"><span style="color: black;"><span style="font-style: normal;"><span style="font-weight: normal;"><span class="Apple-style-span" style="font-family: inherit;">be compiled so as to make it work&nbsp;in a Linux environment.&nbsp;</span></span></span></span></div><div style="margin-bottom: 0cm; orphans: 2; widows: 2;"><span class="Apple-style-span" style="font-family: inherit;"><br /></span></div><div style="font-style: normal; font-weight: normal; margin-bottom: 0cm; orphans: 2; widows: 2;"><span style="color: black;"><span class="Apple-style-span" style="font-family: inherit;">Now, a new executable &#8216;tinypy&#8217; will appear in the &#8216;build&#8217; folder.</span></span></div><div style="font-style: normal; font-weight: normal; margin-bottom: 0cm; orphans: 2; widows: 2;"><span class="Apple-style-span" style="font-family: inherit;">To fully bootstrap and test TinyPy, give the command as:</span></div><div style="margin-bottom: 0cm; orphans: 2; widows: 2;"><span class="Apple-style-span" style="font-family: inherit;">&nbsp;&nbsp; &nbsp;<b><i>python setup.py linux boot</i></b></span></div><div style="margin-bottom: 0cm; orphans: 2; widows: 2;"><span style="color: black;"><i><b><span class="Apple-style-span" style="font-family: inherit;"><br /></span> </b></i><span style="font-style: normal;"><span style="font-weight: normal;"><span class="Apple-style-span" style="font-family: inherit;">Now, in the &#8216;tinypy&#8217; folder shown above, two new&nbsp;</span></span></span></span></div><div style="font-style: normal; font-weight: normal; margin-bottom: 0cm; orphans: 2; widows: 2;"><span style="color: black;"><span class="Apple-style-span" style="font-family: inherit;">executables,&nbsp;&#8216;tinypy&#8217; and &#8216;vm&#8217; will appear, which are the&nbsp;</span></span></div><div style="margin-bottom: 0cm; orphans: 2; widows: 2;"><span style="color: black;"><span style="font-style: normal;"><span style="font-weight: normal;"><span class="Apple-style-span" style="font-family: inherit;">TinyPy parser, and Virtual Machine&nbsp;respectively. It can be&nbsp;</span></span></span></span></div><div style="font-style: normal; font-weight: normal; margin-bottom: 0cm; orphans: 2; widows: 2;"><span class="Apple-style-span" style="font-family: inherit;">noticed that new .pyc files for the corresponding .py&nbsp;</span></div><div style="margin-bottom: 0cm; orphans: 2; widows: 2;"><span style="color: black;"><span style="font-style: normal;"><span style="font-weight: normal;"><span class="Apple-style-span" style="font-family: inherit;">files have&nbsp;also been generated by the Python interpreter.</span></span></span></span></div><div style="margin-bottom: 0cm; orphans: 2; widows: 2;"><span class="Apple-style-span" style="font-family: inherit;"><br /></span></div><div style="font-style: normal; font-weight: normal; margin-bottom: 0cm; orphans: 2; widows: 2;"><span style="color: black;"><span class="Apple-style-span" style="font-family: inherit;">The general usage and some options available are listed below:</span></span></div><div style="margin-bottom: 0cm; orphans: 2; widows: 2;"><span class="Apple-style-span" style="font-family: inherit;">&nbsp;&nbsp; &nbsp;<b><i>python setup.py command [option] [module]</i></b></span></div><div style="margin-bottom: 0cm; orphans: 2; widows: 2;"><span style="color: black;"><i><b><span class="Apple-style-span" style="font-family: inherit;"><br />• </span></b></i><span style="font-style: normal;"><span style="font-weight: normal;"><span class="Apple-style-span" style="font-family: inherit;"><b><i>64 k</i></b> - build a a 64k version of TinyPy source code</span></span></span><b><i><span class="Apple-style-span" style="font-family: inherit;"><br />• </span></i></b><span style="font-style: normal;"><span style="font-weight: normal;"><span class="Apple-style-span" style="font-family: inherit;"><b><i>blob</i></b> - build a single &#8216;tinypy.c&#8217; and &#8216;tinypy.h&#8217;</span></span></span><i><b><span class="Apple-style-span" style="font-family: inherit;"><br /></span> </b></i></span><br /><span style="color: black;"><span style="font-style: normal;"><span style="font-weight: normal;"><span class="Apple-style-span" style="font-family: inherit;"><br /></span></span></span></span><br />The &#8217;<b><i>py2bc.py</i></b>&#8217; script is used to convert a user-generated&nbsp;</div><div style="margin-bottom: 0cm; orphans: 2; widows: 2;"><span style="color: black;"><span style="font-style: normal;"><span style="font-weight: normal;"><span class="Apple-style-span" style="font-family: inherit;">Python script into its corresponding .tpc file.</span></span></span></span></div><div style="font-style: normal; font-weight: normal; margin-bottom: 0cm; orphans: 2; widows: 2;">&nbsp;&nbsp; &nbsp;<b><i>python py2bc.py sample.py sample.tpc</i></b><br /><b><i><br /></i></b><br />Here, tinypy_path is the path (relative to current position)&nbsp;</div><div style="margin-bottom: 0cm; orphans: 2; widows: 2;"><span style="color: black;"><span style="font-style: normal;"><span style="font-weight: normal;"><span class="Apple-style-span" style="font-family: inherit;"><div style="margin-bottom: 0cm; orphans: 2; widows: 2;"><div style="margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;"><span style="color: black;"><span style="font-style: normal;"><span style="font-weight: normal;"><span class="Apple-style-span" style="font-family: inherit;">of either the tinypy&nbsp;executable in the &#8216;build&#8217; folder, or the one</span></span></span></span></div><div style="margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;"><span style="color: black;"><span style="font-style: normal;"><span style="font-weight: normal;"><span class="Apple-style-span" style="font-family: inherit;">in the &#8216;tinypy&#8217; folder. &#8216;sample.py&#8217; is&nbsp;the name of the user-script.</span></span></span></span></div><div style="margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;"><span style="color: black;"><span style="font-style: normal;"><span style="font-weight: normal;"><span class="Apple-style-span" style="font-family: inherit;">&#8216;sample.tpc&#8217; is the name given for the byte-code&nbsp;converted file.</span></span></span></span><br /><span style="color: black;"><span style="font-style: normal;"><span style="font-weight: normal;"><span class="Apple-style-span" style="font-family: inherit;"><br /></span></span></span></span><br />Finally, the generated byte-code (.tpc) is to be passed into the</div></div></span></span></span></span><span style="color: black;"><span style="font-style: normal;"><span style="font-weight: normal;"><span class="Apple-style-span" style="font-family: inherit;">VM for compilation and execution. Assuming the current&nbsp;</span></span></span></span><br /><span style="color: black;"><span style="font-style: normal;"><span style="font-weight: normal;"><span class="Apple-style-span" style="font-family: inherit;">directory as &#8216;tinypy&#8217; folder, it is done</span></span></span></span><span class="Apple-style-span" style="font-family: inherit;">&nbsp;</span><span style="color: black;"><span style="font-style: normal;"><span style="font-weight: normal;"><span class="Apple-style-span" style="font-family: inherit;">as:</span></span></span></span><br /><span class="Apple-style-span" style="font-family: inherit;">&nbsp;&nbsp; &nbsp;<b><i>vm sample.tpc</i></b></span><br /><span style="color: black;"><span style="font-style: normal;"><span style="font-weight: normal;"><span class="Apple-style-span" style="font-family: inherit;"><br />Or logically,</span></span></span></span><br /><span class="Apple-style-span" style="font-family: inherit;">&nbsp;&nbsp; &nbsp;<b><i>gcc vmmain.c -lm ./a.out sample.tpc</i></b></span><br /><span style="color: black;"><span style="font-style: normal;"><span style="font-weight: normal;"><span class="Apple-style-span" style="font-family: inherit;"><br />The &#8216;vmmain.c&#8217;, present in the &#8216;tinypy&#8217; folder, is the main&nbsp;</span></span></span></span><br /><span style="color: black;"><span style="font-style: normal;"><span style="font-weight: normal;"><span class="Apple-style-span" style="font-family: inherit;">function of&nbsp;the VM which runs and automatically links all the</span></span></span></span><br /><span style="color: black;"><span style="font-style: normal;"><span style="font-weight: normal;"><span class="Apple-style-span" style="font-family: inherit;">other files necessary for&nbsp;the VM. And now the output is </span></span></span></span><span class="Apple-style-span" style="font-family: inherit;"> </span></div><div style="font-style: normal; font-weight: normal; margin-bottom: 0cm; orphans: 2; widows: 2;"><span style="color: black;"><span class="Apple-style-span" style="font-family: inherit;">obtained and displayed. For a better picture, the files actually</span></span></div><div style="font-style: normal; font-weight: normal; margin-bottom: 0cm; orphans: 2; widows: 2;"><span style="color: black;"><span class="Apple-style-span" style="font-family: inherit;">needed for VM are:</span></span></div><table border="0" cellpadding="0" cellspacing="0" style="width: 322px;"><col width="322"></col>  <tbody><tr>   <td width="322"><div align="CENTER"><a href="http://1.bp.blogspot.com/_rkBB8V8TgZY/TKITlLtBh5I/AAAAAAAAAPc/rR093bVH87M/s1600/Screenshot-5.png"><span class="Apple-style-span" style="font-family: inherit;"><img align="BOTTOM" border="0" height="140" name="graphics2" src="http://1.bp.blogspot.com/_rkBB8V8TgZY/TKITlLtBh5I/AAAAAAAAAPc/rR093bVH87M/s320/Screenshot-5.png" width="320" /></span></a></div></td>  </tr><tr>   <td width="322"><div align="CENTER" style="border: none; padding: 0cm;"><span style="font-size: x-small;"><span class="Apple-style-span" style="font-family: inherit;">Fig    2. The files needed for the VM</span></span></div></td>  </tr></tbody></table><div style="margin-bottom: 0cm; orphans: 2; widows: 2;"><i><b><span class="Apple-style-span" style="font-family: inherit;"><br /></span> </b></i></div><div style="margin-bottom: 0cm; orphans: 2; widows: 2;"><span class="Apple-style-span" style="font-family: inherit;">For debugging and understanding the flow of control within</span></div><div style="margin-bottom: 0cm; orphans: 2; widows: 2;"><span style="color: black;"><span style="font-style: normal;"><span style="font-weight: normal;"><span class="Apple-style-span" style="font-family: inherit;">the source code, the &#8216;gdb&#8217; and &#8216;ctags&#8217; tools were used.</span></span></span><i><b><span class="Apple-style-span" style="font-family: inherit;"><br /></span> </b></i><span style="font-style: normal;"><b><u><span class="Apple-style-span" style="font-family: inherit;">ANALYZING THE VM</span></u></b></span><b><i><span class="Apple-style-span" style="font-family: inherit;"><br /></span> </i></b><span style="font-style: normal;"><span style="font-weight: normal;"><span class="Apple-style-span" style="font-family: inherit;">A sample program &#8216;sample.py&#8217;:</span></span></span><i><b><span class="Apple-style-span" style="font-family: inherit;"><br />&nbsp;&nbsp; &nbsp;def add(a, b):<br />&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;c = a + b<br />&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;return(c)<br />&nbsp;&nbsp; &nbsp;print(add(1, 9))<br /></span>  <span class="Apple-style-span" style="font-style: normal; font-weight: normal;"><span class="Apple-style-span" style="font-family: inherit;">gives you the output:</span></span></b></i></span></div><div style="margin-bottom: 0cm; orphans: 2; widows: 2;"><span style="color: black;"><span class="Apple-style-span" style="font-family: inherit;">&nbsp;&nbsp; &nbsp; &nbsp;</span><i><b><span class="Apple-style-span" style="font-family: inherit;">10</span></b></i></span></div><div style="margin-bottom: 0cm; orphans: 2; widows: 2;"><span class="Apple-style-span" style="font-family: inherit;"><br /></span></div><div style="font-style: normal; font-weight: normal; margin-bottom: 0cm; orphans: 2; widows: 2;"><span style="color: black;"><span class="Apple-style-span" style="font-family: inherit;">Each time the VM is invoked, a new instance of the VM is</span></span></div><div style="font-style: normal; font-weight: normal; margin-bottom: 0cm; orphans: 2; widows: 2;"><span style="color: black;"><span class="Apple-style-span" style="font-family: inherit;">created .</span></span></div><div style="margin-bottom: 0cm; orphans: 2; widows: 2;"><span style="color: black;"><span class="Apple-style-span" style="font-family: inherit;">&nbsp;&nbsp; &nbsp;</span><i><b><span class="Apple-style-span" style="font-family: inherit;">tp_vm *tp = tp_init(argc, argv);</span></b></i></span></div><div style="margin-bottom: 0cm; orphans: 2; widows: 2;"><span class="Apple-style-span" style="font-family: inherit;"><br /></span></div><div style="font-style: normal; margin-bottom: 0cm; orphans: 2; widows: 2;"><span style="color: black;"><b><span class="Apple-style-span" style="font-family: inherit;">&#8220;Each object in tinypy is stored as a union in the C API.&#8221;</span></b></span></div><div style="font-style: normal; font-weight: normal; margin-bottom: 0cm; orphans: 2; widows: 2;"><span style="color: black;"><span class="Apple-style-span" style="font-family: inherit;">tp_obj is tinypy&#8217;s object representation.</span></span></div><div style="margin-bottom: 0cm; orphans: 2; widows: 2;"><span style="color: black;"><i><b><span class="Apple-style-span" style="font-family: inherit;">typedef union tp_obj</span></b></i></span></div><div style="margin-bottom: 0cm; orphans: 2; widows: 2;"><span style="color: black;"><i><b><span class="Apple-style-span" style="font-family: inherit;">{</span></b></i></span></div><div style="margin-bottom: 0cm; orphans: 2; widows: 2;"><span style="color: black;"><span class="Apple-style-span" style="font-family: inherit;">&nbsp;&nbsp; &nbsp;</span><i><b><span class="Apple-style-span" style="font-family: inherit;">int type;</span></b></i></span></div><div style="margin-bottom: 0cm; orphans: 2; widows: 2;"><span style="color: black;"><span class="Apple-style-span" style="font-family: inherit;">&nbsp;&nbsp; &nbsp;</span><i><b><span class="Apple-style-span" style="font-family: inherit;">tp_number_ number;</span></b></i></span></div><div style="margin-bottom: 0cm; orphans: 2; widows: 2;"><span style="color: black;"><span class="Apple-style-span" style="font-family: inherit;">&nbsp;&nbsp; &nbsp;</span><i><b><span class="Apple-style-span" style="font-family: inherit;">struct{int type;int *data;}gci;</span></b></i></span></div><div style="margin-bottom: 0cm; orphans: 2; widows: 2;"><span style="color: black;"><span class="Apple-style-span" style="font-family: inherit;">&nbsp;&nbsp; &nbsp;</span><i><b><span class="Apple-style-span" style="font-family: inherit;">tp_string_ string;</span></b></i></span></div><div style="margin-bottom: 0cm; orphans: 2; widows: 2;"><span style="color: black;"><span class="Apple-style-span" style="font-family: inherit;">&nbsp;&nbsp; &nbsp;</span><i><b><span class="Apple-style-span" style="font-family: inherit;">tp_dict_ dict;</span></b></i></span></div><div style="margin-bottom: 0cm; orphans: 2; widows: 2;"><span style="color: black;"><span class="Apple-style-span" style="font-family: inherit;">&nbsp;&nbsp; &nbsp;</span><i><b><span class="Apple-style-span" style="font-family: inherit;">tp_list_ list;</span></b></i></span></div><div style="margin-bottom: 0cm; orphans: 2; widows: 2;"><span style="color: black;"><span class="Apple-style-span" style="font-family: inherit;">&nbsp;&nbsp; &nbsp;</span><i><b><span class="Apple-style-span" style="font-family: inherit;">tp_fnc_ fnc;</span></b></i></span></div><div style="margin-bottom: 0cm; orphans: 2; widows: 2;"><span style="color: black;"><span class="Apple-style-span" style="font-family: inherit;">&nbsp;&nbsp; &nbsp;</span><i><b><span class="Apple-style-span" style="font-family: inherit;">tp_data_ data;</span></b></i></span></div><div style="margin-bottom: 0cm; orphans: 2; widows: 2;"><span style="color: black;"><i><b><span class="Apple-style-span" style="font-family: inherit;">}tp_obj;</span></b></i></span></div><div style="margin-bottom: 0cm; orphans: 2; widows: 2;"><span class="Apple-style-span" style="font-family: inherit;"><br /></span></div><div style="font-style: normal; font-weight: normal; margin-bottom: 0cm; orphans: 2; widows: 2;"><span style="color: black;"><span class="Apple-style-span" style="font-family: inherit;">The field &#8216;type&#8217; of the union indicates the type, of the object.</span></span></div><div style="font-style: normal; font-weight: normal; margin-bottom: 0cm; orphans: 2; widows: 2;"><span style="color: black;"><span class="Apple-style-span" style="font-family: inherit;">A type value of 1 indicates that a number is being used,</span></span></div><div style="font-style: normal; font-weight: normal; margin-bottom: 0cm; orphans: 2; widows: 2;"><span style="color: black;"><span class="Apple-style-span" style="font-family: inherit;">type = 2 indicates object is a string and type = 4 indicates a list.</span></span></div><div style="margin-bottom: 0cm; orphans: 2; widows: 2;"><span class="Apple-style-span" style="font-family: inherit;"><br /></span></div><div style="font-style: normal; font-weight: normal; margin-bottom: 0cm; orphans: 2; widows: 2;"><span style="color: black;"><span class="Apple-style-span" style="font-family: inherit;">In the sample program, a function in the VM &#8216;tp_add&#8217; does the</span></span></div><div style="font-style: normal; font-weight: normal; margin-bottom: 0cm; orphans: 2; widows: 2;"><span style="color: black;"><span class="Apple-style-span" style="font-family: inherit;">job of adding two arguments (numbers, strings, lists) that are</span></span></div><div style="font-style: normal; font-weight: normal; margin-bottom: 0cm; orphans: 2; widows: 2;"><span style="color: black;"><span class="Apple-style-span" style="font-family: inherit;">passed to the function as input.</span></span></div><div style="margin-bottom: 0cm; orphans: 2; widows: 2;"><span style="color: black;"><span class="Apple-style-span" style="font-family: inherit;">&nbsp;&nbsp; &nbsp;&nbsp;</span><i><b><span class="Apple-style-span" style="font-family: inherit;">tp_obj tp_add(TP, tp_obj a, tp_obj b)</span></b></i></span></div><div style="margin-bottom: 0cm; orphans: 2; widows: 2;"><span class="Apple-style-span" style="font-family: inherit;"><br /></span></div><div style="font-style: normal; font-weight: normal; margin-bottom: 0cm; orphans: 2; widows: 2;"><span style="color: black;"><span class="Apple-style-span" style="font-family: inherit;">The function definition of &#8216;tp_add&#8217; contains three arguments:</span></span></div><div style="margin-bottom: 0cm; orphans: 2; widows: 2;"><span style="color: black;"><span class="Apple-style-span" style="font-family: inherit;">&nbsp;&nbsp; • </span><span style="font-style: normal;"><span style="font-weight: normal;"><span class="Apple-style-span" style="font-family: inherit;"><b><i>TP</i></b> -&gt; the VM instance</span></span></span></span></div><div style="margin-bottom: 0cm; orphans: 2; widows: 2;"><span style="color: black;"><span class="Apple-style-span" style="font-family: inherit;">&nbsp;&nbsp; • </span><span style="font-style: normal;"><span style="font-weight: normal;"><span class="Apple-style-span" style="font-family: inherit;"><b><i>tp_obj a</i></b> -&gt; the union variable representing the object &#8216;a&#8217; in</span></span></span></span></div><div style="margin-bottom: 0cm; orphans: 2; widows: 2;"><span style="color: black;"><span class="Apple-style-span" style="font-family: inherit;">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span><span style="font-style: normal;"><span style="font-weight: normal;"><span class="Apple-style-span" style="font-family: inherit;">the sample program</span></span></span></span></div><div style="margin-bottom: 0cm; orphans: 2; widows: 2;"><span style="color: black;"><span class="Apple-style-span" style="font-family: inherit;">&nbsp;&nbsp; • </span><span style="font-style: normal;"><span style="font-weight: normal;"><span class="Apple-style-span" style="font-family: inherit;"><b><i>tp_obj b</i></b> -&gt; the union variable representing the object &#8216;b&#8217; in</span></span></span></span></div><div style="margin-bottom: 0cm; orphans: 2; widows: 2;"><span style="color: black;"><span class="Apple-style-span" style="font-family: inherit;">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span><span style="font-style: normal;"><span style="font-weight: normal;"><span class="Apple-style-span" style="font-family: inherit;">the sample program</span></span></span></span></div><div style="margin-bottom: 0cm; orphans: 2; widows: 2;"><span class="Apple-style-span" style="font-family: inherit;"><br /></span></div><div style="font-style: normal; font-weight: normal; margin-bottom: 0cm; orphans: 2; widows: 2;"><span style="color: black;"><span class="Apple-style-span" style="font-family: inherit;">&#8216;a&#8217; and &#8216;b&#8217; are stored as unions and contains fields for types</span></span></div><div style="font-style: normal; font-weight: normal; margin-bottom: 0cm; orphans: 2; widows: 2;"><span style="color: black;"><span class="Apple-style-span" style="font-family: inherit;">such as number, strings, lists, etc.</span></span></div><div style="margin-bottom: 0cm; orphans: 2; widows: 2;"><span class="Apple-style-span" style="font-family: inherit;"><br /></span></div><div style="font-style: normal; font-weight: normal; margin-bottom: 0cm; orphans: 2; widows: 2;"><span style="color: black;"><span class="Apple-style-span" style="font-family: inherit;">Consider two simple lists in Python:</span></span></div><div style="margin-bottom: 0cm; orphans: 2; widows: 2;"><span style="color: black;"><span class="Apple-style-span" style="font-family: inherit;">&nbsp;&nbsp; &nbsp;</span><i><b><span class="Apple-style-span" style="font-family: inherit;">a = [1,2,3]</span></b></i></span></div><div style="margin-bottom: 0cm; orphans: 2; widows: 2;"><span style="color: black;"><span class="Apple-style-span" style="font-family: inherit;">&nbsp;&nbsp; &nbsp;</span><i><b><span class="Apple-style-span" style="font-family: inherit;">b = [4,5,6]</span></b></i></span></div><div style="margin-bottom: 0cm; orphans: 2; widows: 2;"><span class="Apple-style-span" style="font-family: inherit;"><br /></span></div><div style="font-style: normal; font-weight: normal; margin-bottom: 0cm; orphans: 2; widows: 2;"><span style="color: black;"><span class="Apple-style-span" style="font-family: inherit;">The VM uses a function &#8217;</span><i><b><span class="Apple-style-span" style="font-family: inherit;">tp_extend</span></b></i><span class="Apple-style-span" style="font-family: inherit;">&#8217; which returns a union that</span></span></div><div style="font-style: normal; font-weight: normal; margin-bottom: 0cm; orphans: 2; widows: 2;"><span style="color: black;"><span class="Apple-style-span" style="font-family: inherit;">contains the new (extended) list. Its &#8216;type&#8217; would be 4 indicating</span></span></div><div style="font-style: normal; font-weight: normal; margin-bottom: 0cm; orphans: 2; widows: 2;"><span style="color: black;"><span class="Apple-style-span" style="font-family: inherit;">a list. The &#8216;list&#8217; structure variable includes a pointer *val that</span></span></div><div style="font-style: normal; font-weight: normal; margin-bottom: 0cm; orphans: 2; widows: 2;"><span style="color: black;"><span class="Apple-style-span" style="font-family: inherit;">points to another structure </span><i><b><span class="Apple-style-span" style="font-family: inherit;">&#8217;_tp_list</span></b></i><span class="Apple-style-span" style="font-family: inherit;">&#8217;.</span></span></div><div style="margin-bottom: 0cm; orphans: 2; widows: 2;"><span style="color: black;"><span class="Apple-style-span" style="font-family: inherit;">&nbsp;&nbsp; &nbsp;</span><i><b><span class="Apple-style-span" style="font-family: inherit;">typedef struct _tp_list</span></b></i></span></div><div style="margin-bottom: 0cm; orphans: 2; widows: 2;"><span style="color: black;"><span class="Apple-style-span" style="font-family: inherit;">&nbsp;&nbsp; &nbsp;</span><i><b><span class="Apple-style-span" style="font-family: inherit;">{</span></b></i></span></div><div style="margin-bottom: 0cm; orphans: 2; widows: 2;"><span style="color: black;"><span class="Apple-style-span" style="font-family: inherit;">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;</span><i><b><span class="Apple-style-span" style="font-family: inherit;">int gci;</span></b></i></span></div><div style="margin-bottom: 0cm; orphans: 2; widows: 2;"><span style="color: black;"><span class="Apple-style-span" style="font-family: inherit;">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;</span><i><b><span class="Apple-style-span" style="font-family: inherit;">tp_obj *items;</span></b></i></span></div><div style="margin-bottom: 0cm; orphans: 2; widows: 2;"><span style="color: black;"><span class="Apple-style-span" style="font-family: inherit;">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;</span><i><b><span class="Apple-style-span" style="font-family: inherit;">int len;</span></b></i></span></div><div style="margin-bottom: 0cm; orphans: 2; widows: 2;"><span style="color: black;"><span class="Apple-style-span" style="font-family: inherit;">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;</span><i><b><span class="Apple-style-span" style="font-family: inherit;">int alloc;</span></b></i></span></div><div style="margin-bottom: 0cm; orphans: 2; widows: 2;"><span style="color: black;"><span class="Apple-style-span" style="font-family: inherit;">&nbsp;&nbsp; &nbsp;</span><i><b><span class="Apple-style-span" style="font-family: inherit;">}_tp_list;</span></b></i></span></div><div style="margin-bottom: 0cm; orphans: 2; widows: 2;"><span class="Apple-style-span" style="font-family: inherit;"><br /></span></div><div style="font-style: normal; font-weight: normal; margin-bottom: 0cm; orphans: 2; widows: 2;"><span style="color: black;"><span class="Apple-style-span" style="font-family: inherit;">The pointer </span><i><b><span class="Apple-style-span" style="font-family: inherit;">*items </span></b></i><span class="Apple-style-span" style="font-family: inherit;">as you could see is of type tp_obj and</span></span></div><div style="font-style: normal; font-weight: normal; margin-bottom: 0cm; orphans: 2; widows: 2;"><span style="color: black;"><span class="Apple-style-span" style="font-family: inherit;">de-referencing it would give you the union tp_obj. This</span></span></div><div style="font-style: normal; font-weight: normal; margin-bottom: 0cm; orphans: 2; widows: 2;"><span style="color: black;"><span class="Apple-style-span" style="font-family: inherit;">union contains a single element of the final list.</span></span></div><div style="margin-bottom: 0cm; orphans: 2; widows: 2;"><span class="Apple-style-span" style="font-family: inherit;"><br /></span></div><div style="font-style: normal; font-weight: normal; margin-bottom: 0cm; orphans: 2; widows: 2;"><span style="color: black;"><span class="Apple-style-span" style="font-family: inherit;">To obtain the next element of the final list:</span></span></div><div style="margin-bottom: 0cm; orphans: 2; widows: 2;"><span style="color: black;"><span class="Apple-style-span" style="font-family: inherit;">&nbsp;&nbsp; &nbsp;</span><i><b><span class="Apple-style-span" style="font-family: inherit;">r.list.val -&gt; items</span></b></i></span></div><div style="margin-bottom: 0cm; orphans: 2; widows: 2;"><span class="Apple-style-span" style="font-family: inherit;"><br /></span></div><div style="font-style: normal; font-weight: normal; margin-bottom: 0cm; orphans: 2; widows: 2;"><span style="color: black;"><span class="Apple-style-span" style="font-family: inherit;">would give you the address of the union. </span></span><span class="Apple-style-span" style="font-family: inherit;"> </span></div><div style="font-style: normal; font-weight: normal; margin-bottom: 0cm; orphans: 2; widows: 2;"><span style="color: black;"><span class="Apple-style-span" style="font-family: inherit;">Union containing the next element of the list = Address of&nbsp;</span></span></div><div style="font-style: normal; font-weight: normal; margin-bottom: 0cm; orphans: 2; widows: 2;"><span style="color: black;"><span class="Apple-style-span" style="font-family: inherit;">the current union + size of each union.</span></span></div><div style="margin-bottom: 0cm; orphans: 2; widows: 2;"><span style="color: black;"><span class="Apple-style-span" style="font-family: inherit;">&nbsp;&nbsp; </span><span style="font-style: normal;"><span style="font-weight: normal;"><span class="Apple-style-span" style="font-family: inherit;">Here:</span></span></span></span></div><div style="margin-bottom: 0cm; orphans: 2; widows: 2;"><span style="color: black;"><span class="Apple-style-span" style="font-family: inherit;">&nbsp;&nbsp; &nbsp;</span><i><b><span class="Apple-style-span" style="font-family: inherit;">r.list.val -&gt; items = 0x96ca048 + 10</span></b></i></span></div><div style="font-style: normal; font-weight: normal; margin-bottom: 0cm; orphans: 2; widows: 2;"><span class="Apple-style-span" style="font-family: inherit;"><br /></span></div><div style="font-style: normal; font-weight: normal; margin-bottom: 0cm; orphans: 2; widows: 2;"><span style="color: black;"><span class="Apple-style-span" style="font-family: inherit;">would give you the union that stores the next element of the</span></span></div><div style="font-style: normal; font-weight: normal; margin-bottom: 0cm; orphans: 2; widows: 2;"><span style="color: black;"><span class="Apple-style-span" style="font-family: inherit;">list . The size of the union is 10, in hexadecimal = 16 bytes.</span></span></div><table border="0" cellpadding="0" cellspacing="0" style="width: 322px;"><col width="322"></col>  <tbody><tr>   <td width="322"><div align="CENTER"><a href="http://3.bp.blogspot.com/_rkBB8V8TgZY/TKIfMfrsehI/AAAAAAAAAPg/U9dV8MwepRs/s1600/drawing.png"><span class="Apple-style-span" style="font-family: inherit;"><img align="BOTTOM" border="0" height="180" name="graphics3" src="http://3.bp.blogspot.com/_rkBB8V8TgZY/TKIfMfrsehI/AAAAAAAAAPg/U9dV8MwepRs/s320/drawing.png" width="320" /></span></a></div></td>  </tr><tr>   <td width="322"><div align="CENTER" style="border: none; padding: 0cm;"><span style="font-size: x-small;"><span class="Apple-style-span" style="font-family: inherit;">Fig    3. The representation of a list</span></span></div></td>  </tr></tbody></table><div style="margin-bottom: 0cm; orphans: 2; widows: 2;"><span class="Apple-style-span" style="font-family: inherit;"><br /></span></div><div style="font-style: normal; margin-bottom: 0cm; orphans: 2; widows: 2;"><span style="color: black;"><u><b><span class="Apple-style-span" style="font-family: inherit;">THE PATH OF &#8216;tp_add&#8217;</span></b></u></span></div><table border="0" cellpadding="0" cellspacing="0" style="width: 264px;"><col width="264"></col>  <tbody><tr>   <td width="264"><div align="CENTER"><a href="http://1.bp.blogspot.com/_rkBB8V8TgZY/TKIgCBB1EcI/AAAAAAAAAPk/ccuuVugdsbg/s1600/flow.png"><span class="Apple-style-span" style="font-family: inherit;"><img align="BOTTOM" border="0" height="320" name="graphics4" src="http://1.bp.blogspot.com/_rkBB8V8TgZY/TKIgCBB1EcI/AAAAAAAAAPk/ccuuVugdsbg/s320/flow.png" width="262" /></span></a></div></td>  </tr><tr>   <td width="264"><div align="CENTER" style="border: none; padding: 0cm;"><span style="font-size: x-small;"><span class="Apple-style-span" style="font-family: inherit;">Fig    4. The backtraced path of &#8216;tp_add&#8217;</span></span></div></td>  </tr></tbody></table><div style="margin-bottom: 0cm; orphans: 2; widows: 2;"><span class="Apple-style-span" style="font-family: inherit;"><br /></span></div><div style="margin-bottom: 0cm; orphans: 2; widows: 2;"><span class="Apple-style-span" style="font-family: inherit;">&nbsp;&nbsp; </span><span style="color: black;"><span style="font-style: normal;"><span style="font-weight: normal;"><span class="Apple-style-span" style="font-family: inherit;">While debugging, our sample program and one of the&nbsp;</span></span></span></span></div><div style="font-style: normal; font-weight: normal; margin-bottom: 0cm; orphans: 2; widows: 2;"><span style="color: black;"><span class="Apple-style-span" style="font-family: inherit;">input data too, can be&nbsp;spotted as:</span></span></div><table border="0" cellpadding="0" cellspacing="0" style="width: 322px;"><col width="322"></col>  <tbody><tr>   <td width="322"><div align="CENTER"><a href="http://4.bp.blogspot.com/_rkBB8V8TgZY/TKIgmAfsiVI/AAAAAAAAAPo/78NJLabLTh4/s1600/Screenshot-7.png"><span class="Apple-style-span" style="font-family: inherit;"><img align="BOTTOM" border="0" height="22" name="graphics5" src="http://4.bp.blogspot.com/_rkBB8V8TgZY/TKIgmAfsiVI/AAAAAAAAAPo/78NJLabLTh4/s320/Screenshot-7.png" width="320" /></span></a></div></td>  </tr><tr>   <td width="322"><div align="CENTER" style="border: none; padding: 0cm;"><span style="font-size: x-small;"><span class="Apple-style-span" style="font-family: inherit;">Fig    5. Spotting the sample program</span></span></div></td>  </tr></tbody></table><table border="0" cellpadding="0" cellspacing="0" style="width: 322px;"><col width="322"></col>  <tbody><tr>   <td width="322"><div align="CENTER"><a href="http://2.bp.blogspot.com/_rkBB8V8TgZY/TKIg7sOI6tI/AAAAAAAAAPs/AP5TAXRRi_k/s1600/Screenshot-9.png"><span class="Apple-style-span" style="font-family: inherit;"><img align="BOTTOM" border="0" height="24" name="graphics6" src="http://2.bp.blogspot.com/_rkBB8V8TgZY/TKIg7sOI6tI/AAAAAAAAAPs/AP5TAXRRi_k/s320/Screenshot-9.png" width="320" /></span></a></div></td>  </tr><tr>   <td width="322"><div align="CENTER" style="border: none; padding: 0cm;"><span style="font-size: x-small;"><span class="Apple-style-span" style="font-family: inherit;">Fig    6. Spotting one of the inputs</span></span></div></td>  </tr></tbody></table><div style="margin-bottom: 0cm; orphans: 2; widows: 2;"><span class="Apple-style-span" style="font-family: inherit;"><br /></span></div><div style="margin-bottom: 0cm; orphans: 2; widows: 2;"><span class="Apple-style-span" style="font-family: inherit;">&nbsp; &nbsp;</span><span style="color: black;"><span style="font-style: normal;"><span style="font-weight: normal;"><span class="Apple-style-span" style="font-family: inherit;">The <b><i>switch()</i></b> inside &#8217;<b><i>vm.c</i></b>&#8217; is invoked nine times, one of</span></span></span></span></div><div style="font-style: normal; font-weight: normal; margin-bottom: 0cm; orphans: 2; widows: 2;"><span style="color: black;"><span class="Apple-style-span" style="font-family: inherit;">which will be the&nbsp;selection of case: &#8217;<b><i>TP_IADD</i></b>&#8217; and&nbsp;</span></span></div><div style="font-style: normal; font-weight: normal; margin-bottom: 0cm; orphans: 2; widows: 2;"><span style="color: black;"><span class="Apple-style-span" style="font-family: inherit;">subsequent execution of &#8217;<b><i>tp_add</i></b>&#8217;.</span></span></div><table border="0" cellpadding="0" cellspacing="0" style="width: 322px;"><col width="322"></col>  <tbody><tr>   <td width="322"><div align="CENTER"><a href="http://1.bp.blogspot.com/_rkBB8V8TgZY/TKIheMvVw5I/AAAAAAAAAPw/TR5jDDu1rKQ/s1600/Screenshot-25.png"><span class="Apple-style-span" style="font-family: inherit;"><img align="BOTTOM" border="0" height="48" name="graphics7" src="http://1.bp.blogspot.com/_rkBB8V8TgZY/TKIheMvVw5I/AAAAAAAAAPw/TR5jDDu1rKQ/s320/Screenshot-25.png" width="320" /></span></a></div></td>  </tr><tr>   <td width="322"><div align="CENTER" style="border: none; padding: 0cm;"><span style="font-size: x-small;"><span class="Apple-style-span" style="font-family: inherit;">Fig    7. The case: &#8216;TP_IADD&#8217;</span></span></div></td>  </tr></tbody></table><div style="font-style: normal; font-weight: normal; margin-bottom: 0cm; orphans: 2; widows: 2;"><span style="color: black;"><span class="Apple-style-span" style="font-family: inherit;"><br /></span> </span></div><div style="font-style: normal; font-weight: normal; margin-bottom: 0cm; orphans: 2; widows: 2;"><span style="color: black;"><span class="Apple-style-span" style="font-family: inherit;">Another trial debugging was done with input file &#8216;testing.tpc&#8217;,&nbsp;</span></span></div><div style="font-style: normal; font-weight: normal; margin-bottom: 0cm; orphans: 2; widows: 2;"><span style="color: black;"><span class="Apple-style-span" style="font-family: inherit;">whose source&nbsp;script was &#8216;testing.py&#8217; which just added two&nbsp;</span></span></div><div style="font-style: normal; font-weight: normal; margin-bottom: 0cm; orphans: 2; widows: 2;"><span style="color: black;"><span class="Apple-style-span" style="font-family: inherit;">numbers. Only the filename &#8216;testing.tpc&#8217; was given to the&nbsp;</span></span></div><div style="font-style: normal; font-weight: normal; margin-bottom: 0cm; orphans: 2; widows: 2;"><span style="color: black;"><span class="Apple-style-span" style="font-family: inherit;">debugger.</span></span></div><div style="margin-bottom: 0cm; orphans: 2; widows: 2;"><span class="Apple-style-span" style="font-family: inherit;"><br /></span></div><div style="font-style: normal; font-weight: normal; margin-bottom: 0cm; orphans: 2; widows: 2;"><span style="color: black;"><span class="Apple-style-span" style="font-family: inherit;">The VM snapshot taken while debugging, showing the&nbsp;</span></span></div><div style="font-style: normal; font-weight: normal; margin-bottom: 0cm; orphans: 2; widows: 2;"><span style="color: black;"><span class="Apple-style-span" style="font-family: inherit;">name of&nbsp;the source script &#8216;testing.py&#8217; and the function used</span></span></div><div style="font-style: normal; font-weight: normal; margin-bottom: 0cm; orphans: 2; widows: 2;"><span style="color: black;"><span class="Apple-style-span" style="font-family: inherit;">&#8216;print(a + b)&#8217; stored in the fields&nbsp;of the VM data structures,</span></span></div><div style="font-style: normal; font-weight: normal; margin-bottom: 0cm; orphans: 2; widows: 2;"><span style="color: black;"><span class="Apple-style-span" style="font-family: inherit;">and the conclusion to this analysis, and more details can be</span></span></div><div style="font-style: normal; font-weight: normal; margin-bottom: 0cm; orphans: 2; widows: 2;"><span style="color: black;"><span class="Apple-style-span" style="font-family: inherit;">found in:</span></span></div><div style="margin-bottom: 0cm;"><a href="http://github.com/HariJohnKuriakose/tinypython">http://github.com/HariJohnKuriakose/tinypython</a><br /><br /></div>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Memoization]]></title>
    <link href="http://ejhari.github.io/blog/2010/09/15/memoization/"/>
    <updated>2010-09-15T08:07:00+05:30</updated>
    <id>http://ejhari.github.io/blog/2010/09/15/memoization</id>
    <content type="html"><![CDATA[Computers are very fast machines. But the computation time<br />also depend on the algorithm we choose. It can happen that<br />if a proper algorithm is not chosen, it may take a very long<br />time for execution.<br /><br />On writing a simple recursive fibonacci generator function for<br />the nth element, <i>fib(n)</i>, we will get fine results, but only for low<br />values of <i>n</i>. This is because <i>fib(n)</i> has exponential complexity.<br />Such functions grow very fast, so fast that even for small<br />values of `n&#8217;  (where `n&#8217; is the size of the input), our program<br />will take a long  time to finish. <br /><br />Memoization is the process by which we speed up the situation.<br />The underlying principle is to create an associative array, say <i>&nbsp;</i><br /><i>dict</i>, which contain keys = n, and values = <i>fib(n)</i>. Each time a<br /><i>fib(n)</i> is called, the associative array will be checked whether it<br />contain the key &#8216;n&#8217;. If yes, just return <i>dict[n]</i>. Otherwise, create<br />a new key: value pair for <i>dict</i>. Thus, the number of recursion will<br />be drastically reduced, with this look-in-the-lookup-table policy.<br /><br />Ofcourse, memoization is an upgrade to time compplexity, but<br />will consume space.<br />The implementation in Python looked like:<br /><br /><i> def memoized_fib(x):<br />if dict.has_key(x):<br />return dict[x]<br />else:<br />dict[x] = fib(x)<br />return dict[x]<br /><br />def fib(n):<br />if n == 0: return 0<br />elif n == 1: return 1<br />else: return memoized_fib(n-2) + memoized_fib(n-1)<br /><br />&nbsp;dict = {0: 0, 1: 1}<br /></i>  <br /><br />In Python, the <b>recursion limit</b> is fixed by the interpreter itself. It can <br />be found in: <br /><i><b>sys.setrecursionlimit(&lt;limit&gt;)</b></i><br /><br />Now, set a very high limit, and run the code. If its high enough, u will <br />deplete the stack memory size (8 MB) of the C backend of your Python <br />virtual machine, leading to a segmentation fault there, which is <br />propagated back to your Python interpreter, <b>crashing Python itself</b>!]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[To Fly With the Phoenix ...]]></title>
    <link href="http://ejhari.github.io/blog/2010/09/15/to-fly-with-phoenix/"/>
    <updated>2010-09-15T07:37:00+05:30</updated>
    <id>http://ejhari.github.io/blog/2010/09/15/to-fly-with-phoenix</id>
    <content type="html"><![CDATA[Well, I must say, simplicity and brilliance is what a FOSS meet will be <br />all about, if you watch the proper people. For the <b>National Conference </b><br /><b>on Free Software And Education, September 10-12, 2010,</b> me and<br />my four friends Prasanth, Remya, Sumith and Sunil geared up with a handy electronic instrument called the Phoenix(aptly named), and barged in<br />through the front gates. We came to know about the Phoenix from our<br />teacher, <b>Mr. Pramode C. E.</b>, and beacme interested. This interest made<br />us to take it to the FOSS meet and do a few tricks with it, with guidance<br />from Pramode Sir. Some mistakes and pitfalls happened too.<br /><br />First of all, whats &#8217;<b>Phoenix</b>&#8217;? Its an electronic gadget with an Atmel <br />ATmega16 mcu inside it, with hardware peripherals including a DAC, ADC,<br />digital I/O pins, comparator, waveform generator, amplifier, etc, <br />necessray to build a simple circuit. The point? The whole Phoenix board<br />is set up such that a large variety of experiments from Physics can be <br />conducted with ease. Highly accurate measurements are thus possible. <br />Experiments include a simple charging-discharging cycle of a capacitor,<br />to alpha particle radiation measurement from a radiative source. Plus, <br />the board runs in C, with the computer front-end being Python. Hows <br />that? An &#8216;open hardware&#8217;, it may be called, maybe the first of its kind.<br /><br />Coming back, the first day was at Tagore Centinery Hall, Calicut Town. <br />A banner highlighted by the face of <b>Richard Mathew Stallman a.k.a </b><br /><b>R. M. S.</b> greeted us. Volunteeers and coordinators from NIT Calicut, gave<br />a brief picture of the schedule. Understood that, only the inaugral <br />ceremony with a keynote address from R. M. S. will be arranged that day.<br />At the far end, some tables were set up, and many free software users <br />were vigorously working with their laptops. <br /><br />We were to see <b>Mr. Sasikumar</b>, the &#8216;R. M. S.&#8217; of Kerala. Till then, we <br />were just standing their groping with our belongings, not knowing what <br />to do. Once we met him, the situation changed abruptly. We were greeted <br />with a warm, enthusiastic, polite smile, and ushered to the expo area. <br />The volunteers were asked to allot a table for us. Then, we became a <br />part of the event.<br /><br />Till the original R. M. S. arrived on the scene, the expo continued. A<br />few people came to visit the &#8216;stalls&#8217;. There were students, enthusiasts,<br />Physics teachers, and others who came to see what Phoenix was. There <br />were Phoenix users among them too, who wanted to see if any newer <br />features have been developed for the Phoenix.<br /><br />Finally, I learned that R. M. S. had arrived, and has gone inside the <br />Hall, while my back was turned. Soon, everyone got inside, and I saw <br />the guy for the first time. I was seeing a cute-in-an-odd-kind-of-way,<br />big, living genius. I stared at him for long, with only one thought in<br />mind. I had to hear his voice too. Meanwhile the guest were asked to <br />get on stage. R. M. S. chose a side chair, but was ushered to the <br />center of the dias. Later, I saw him, kneeled down on his left leg, <br />drinking water from a bottle, kept on a table infrot of him. Well, <br />everything he did seemed cute and nice. A few moments later, he simply<br />yawned, and I couldnt help but smile.<br /><br />There were to be about 8 more felicitations before the keynote address<br />from R. M.  S. We couldnt wait that long, we had to get to our staying<br />places. We reached <b>NIT Calicut</b>, next day by noon. We  arrived before for<br />the lunch session and quickly set up the table. Many people came to us <br />during the break, to know about Phoenix. There was a Physics teacher, <br />who believed Physics has to be &#8216;touched and learned&#8217;. But i had a <br />counter-point that Phoenix could do things otherwise impossible in a <br />lab. One particular student was so excited to hear about Phoenix, <br />because he had been looking around for such a low cost instrument for <br />obvious purposes. There was a table for IIT Bombay, who had come with <br />their project to create spoken-tutorials for all the major free <br />software applications available now. Shortly after the lunch session <br />was over, we packed our things and got out, because we had to reach <br />our shelters in the same day itself.<br /><br /><u>Mistakes</u>:<br />1. I didnt take photographs all through the event.<br />2. Didnt bring a banner or charts (showing the details of Phoenix) for<br />&nbsp;&nbsp;&nbsp; display purposes.<br />3. Didnt bring a better experiment apparatus, perhaps it could have <br />&nbsp;&nbsp;&nbsp; gained more attention.<br /><br /><u>Pitfalls</u>:<br />1. We totally lost control of time. We were running for shelter to <br />&nbsp;&nbsp;&nbsp; sleep, running to be present at the meet.<br />&nbsp;&nbsp;&nbsp; In a nutshell, we couldnt sit for a single talk.<br /><br /><u>What we learned</u>:<br />1. What to expect and what not to in a FOSS meet.<br />2. The feeling when someone like Dr. Prabhu Ramachandran whizzes past <br />&nbsp;&nbsp;&nbsp; you, and you continue to stare blankly, unable to utter a single word.<br />3. How it is to bring &#8216;something&#8217; to the meet and to bring &#8216;some real <br />&nbsp;&nbsp;&nbsp; thing&#8217; to the meet, from the fact that, we had also brought along an <br />&nbsp;&nbsp;&nbsp; elementary study report on the <b>TinyPy Virtual Machine v1.1</b>.]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Classes in Python]]></title>
    <link href="http://ejhari.github.io/blog/2010/09/06/classes-in-python/"/>
    <updated>2010-09-06T02:08:00+05:30</updated>
    <id>http://ejhari.github.io/blog/2010/09/06/classes-in-python</id>
    <content type="html"><![CDATA[In Python, "<b>classes are objects too&#8221;</b>. Let me clarify.<br /><br />Let me define a sample class.<br /><i>&gt;&gt;&gt; class abc: pass</i><br /><i>&gt;&gt;&gt; abc</i><br /><i>&lt;class__main__.abc at 0xb76e341c&gt;</i><br />It indicates that in Python, classes are not abstract!<br />They too take memory space.<br /><i><br /></i><br />Lets explore further.<br /><i>&gt;&gt;&gt; m = abc</i><br /><i>&gt;&gt;&gt; m</i><br /><i>&lt;class__main__.abc at 0xb76e341c&gt;</i><br /><i>&gt;&gt;&gt; m = abc( )</i><br /><i>&gt;&gt;&gt; m</i><br /><i>&lt;__main__.abc instance at 0xb76e298c&gt;</i><br />i.e, in Python, <b>both classes and their objects are concrete</b>.<br /><br />Now,<br /><i>&gt;&gt;&gt; abc.p = 10</i><br /><i>&gt;&gt;&gt; abc.p</i><br /><i>10</i><br />Classes can act as objects, as already told above!<br /><i><br /></i><br />Still further,<br /><i>&gt;&gt;&gt; m = abc()</i><br /><i>&gt;&gt;&gt; m.p</i><br /><i>10</i><br /><i>&gt;&gt;&gt; m.q = 20</i><br /><i>&gt;&gt;&gt; abc.q</i><br /><i>20</i><br />What exactly happened here?<br /><i><br /></i><br /><u>Things to understand:</u><br /><u></u>1. Here, &#8220;.&#8221;<i>&nbsp;<span class="Apple-style-span" style="font-style: normal;">works as&nbsp;a search operator&nbsp;</span></i><br /><i><span class="Apple-style-span" style="font-style: normal;">2. On querying </span>m.p, </i>first checks if there&#8217;s a <i>p</i>&nbsp;attribute in <i>m</i><br />3. If not, automatically finds out type of <i>m</i>, then searches for <i>p</i>&nbsp;there.<br />4. The <i>p</i>&nbsp;attribute here, actually belongs to <i>abc, </i>not <i>m.</i>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[C and Python: A Language Faceoff]]></title>
    <link href="http://ejhari.github.io/blog/2010/09/05/c-and-python-language-faceoff/"/>
    <updated>2010-09-05T23:25:00+05:30</updated>
    <id>http://ejhari.github.io/blog/2010/09/05/c-and-python-language-faceoff</id>
    <content type="html"><![CDATA[1. <u>Data Types</u><br />&nbsp;&nbsp; &nbsp;Python is a good example for a <b>dynamically typed </b>programming<br />&nbsp;&nbsp; &nbsp;language. It&nbsp;means that,&nbsp;there are no need for type declarations. Any data<br />&nbsp;&nbsp; &nbsp;can be initialized&nbsp;directly and the&nbsp;corresponding type&nbsp;will be automatically<br />&nbsp;&nbsp; &nbsp;assigned and&nbsp;understood by the Python interpreter.<br />&nbsp;&nbsp; &nbsp;<i>&gt;&gt;&gt;a = 12</i><br /><i>&nbsp;&nbsp; &nbsp;&gt;&gt;&gt;c = &#8216;hello&#8217;</i><br /><i>&nbsp;&nbsp; &nbsp;</i><br /><i>&nbsp;&nbsp; &nbsp;</i>C is a <b>statically typed </b>language.<b> </b>We need to first declare the variable.<br />&nbsp;&nbsp; &nbsp;Only&nbsp;then are we&nbsp;allowed<i>&nbsp;</i>to define it<i>. </i>The C compiler will understand<br />&nbsp;&nbsp; &nbsp;the type<i>&nbsp;</i>of&nbsp;the&nbsp;data and assign suitable&nbsp;storage space only when we<br />&nbsp;&nbsp; &nbsp;declare it.<br /><i>&nbsp;&nbsp; &nbsp;$ int a, b=2;</i><br /><i></i><i>&nbsp;&nbsp; &nbsp;$ char c = &#8216;h&#8217;;</i><br /><i></i><i>&nbsp;&nbsp; &nbsp;$ a=10;</i><br /><br />2. <u>Array Indexing</u><br />&nbsp;&nbsp; &nbsp;The mechanism of array indexing in C is as follows:<br />&nbsp;&nbsp; &nbsp;array index is given by &#8217;<b>base address + offset</b>&#8217;<br />&nbsp;&nbsp; &nbsp;Therefore, how large be the array length, C compiler only needs to add<br />&nbsp;&nbsp; &nbsp;the&nbsp;offset to the&nbsp;base address to access the required array location.<br /><br />&nbsp;&nbsp; &nbsp;In Python, the situation is different. It is compulsory for its interpreter to<br />&nbsp;&nbsp; &nbsp;follow&nbsp;2 rules:<br />&nbsp;&nbsp; &nbsp;i. <b>check whether current array index is out of bound</b><br />&nbsp;&nbsp; &nbsp;ii. <b>access that index location</b><br /><br />&nbsp;&nbsp; &nbsp;In short, its even possible to go out of bound in C. Garbage values in<br />&nbsp;&nbsp; &nbsp;that&nbsp;locations will&nbsp;be returned. Thats all. But Python is very<br />&nbsp;&nbsp; &nbsp;conservative. You&nbsp;specify an array length, you&nbsp;better stay inside it. No<br />&nbsp;&nbsp; &nbsp;bending rules.<br /><br />&nbsp;&nbsp; &nbsp;Finally, the outcome. As you can guess, array indexing in C is blazing<br />&nbsp;&nbsp; &nbsp;fast. If&nbsp;we work&nbsp;on the same array in Python, we may have to wait.<br />&nbsp;&nbsp; &nbsp;Maybe really long.<br /><br />3. <u>Dynamic Allocations</u><br />&nbsp;&nbsp; &nbsp;On the outset, i take the privilege to assume you know what dynamic<br />&nbsp;&nbsp; &nbsp;allocations are.<br /><br />&nbsp;&nbsp; &nbsp;They are <b>very troublesome in C</b>. Simply speaking, if you do an <i>&nbsp;</i><br /><i>&nbsp;&nbsp; &nbsp;malloc(),&nbsp;</i>then use the&nbsp;same pointer to do&nbsp;another <i>malloc(),</i>&nbsp;you will<br />&nbsp;&nbsp; &nbsp;lose control of the&nbsp;firstly allocated memory&nbsp;block forever. You can&#8217;t<br />&nbsp;&nbsp; &nbsp;use it anymore.&nbsp;So be wary. Thats all you can do.<br /><br />&nbsp;&nbsp; &nbsp;For this matter, Python is awesome. It will take care of such<br />&nbsp;&nbsp; &nbsp;unhandled&nbsp;allocations of&nbsp;memory automatically. Its called <b>garbage&nbsp;</b><br /><b>&nbsp;&nbsp; &nbsp;collection</b> or <b>automatic&nbsp;</b><b>memory management</b>. We&nbsp;can say that, each<br />&nbsp;&nbsp; &nbsp;allocated block has a <b>reference&nbsp;</b><b>count</b>, which has the value of the<br />&nbsp;&nbsp; &nbsp;number of pointers currently pointing to that&nbsp;particular block. This<br />&nbsp;&nbsp; &nbsp;count, is incremented or decremented automatically and&nbsp;accurately.<br />&nbsp;&nbsp; &nbsp;There is one consequence, though. The&nbsp;<b>compilation time will be&nbsp;</b><br /><b>&nbsp;&nbsp; &nbsp;non-deterministic</b> because we cant predict when and how Python<br />&nbsp;&nbsp; &nbsp;attempts this.<br /><br />4. <u>Indentation</u><br />&nbsp;&nbsp; &nbsp;In short, indentation is <b>compulsory in Python</b>. The intermezzo coding<br />&nbsp;&nbsp; &nbsp;style&nbsp;proposes 4&nbsp;spaces. While the Google coders are seen to be using<br />&nbsp;&nbsp; &nbsp;only 2.<br />&nbsp;&nbsp; <br />&nbsp;&nbsp; &nbsp;In C, it is just the other way. Here, it is only a matter of <b>user&nbsp;</b><br /><b>&nbsp;&nbsp; &nbsp;readability</b>.&nbsp;The C compiler&nbsp;doesn&#8217;t&nbsp;care.<br /><br />5. <u>Functions</u><br />&nbsp;&nbsp; &nbsp;In Python, all the functions, both built-in and user-defined, are <b>first&nbsp;</b><br /><b>&nbsp;&nbsp; &nbsp;class</b>.&nbsp;A function is said&nbsp;to be first class, if it can be treated just as a<br />&nbsp;&nbsp; &nbsp;variable. It means&nbsp;that, in Python, functions can&nbsp;be passed as<br />&nbsp;&nbsp; &nbsp;parameters, and returned too. Coool,&nbsp;eh? If so, how about knowing<br />&nbsp;&nbsp; &nbsp;that this&nbsp;concept can be extended to creating&nbsp;<b>higher order functions</b>?<br />&nbsp;&nbsp; &nbsp;They are functions which&nbsp;operate on other functions,&nbsp;e.g. integration,<br />&nbsp;&nbsp; &nbsp;differentiation. Three built-in higher order&nbsp;functions in Python&nbsp;are<br /><i>&nbsp;&nbsp; &nbsp;map,&nbsp;</i><i>filter </i>and <i>reduce.</i><br /><br /><i></i>&nbsp;&nbsp; &nbsp;In C, its just the contradictory. Functions are functions, variables are<br />&nbsp;&nbsp; &nbsp;variables.&nbsp;No mixing up.<br /><br />6. <u>Pointers</u><br /><u></u>&nbsp;&nbsp; &nbsp;They are the most awesome weapon in C. You can do powerful things<br />&nbsp;&nbsp; &nbsp;with&nbsp;them, that can be&nbsp;either only dreamed of or very hard to<br />&nbsp;&nbsp; &nbsp;accomplish in other&nbsp;languages. But as powerful they&nbsp;are, be very<br />&nbsp;&nbsp; &nbsp;careful with the memory&nbsp;manipulations&nbsp;you can do with them, or else<br />&nbsp;&nbsp; &nbsp;you are a goner.<br /><br />&nbsp;&nbsp; &nbsp;They are not as such implemented in Python. But some similarity can be<br />&nbsp;&nbsp; &nbsp;felt in&nbsp;some&nbsp;operations that can be performed. For a brief idea, refer to<br />&nbsp;&nbsp; &nbsp;<a href="http://harijohnkuriakose.blogspot.com/2010/08/pointers-in-python.html">&#8220;Pointers&#8221; in Python</a>.<br /><br />7. <u>Assignments in Expressions</u><br /><u></u>&nbsp;&nbsp; &nbsp;In C its possible to write,<br />&nbsp;&nbsp; &nbsp;$ int a, b=1;<br /><i>&nbsp;&nbsp; &nbsp;$ if ((a=12)&gt;b)</i><br /><i></i>&nbsp;&nbsp; &nbsp;$ &nbsp; &nbsp; &nbsp; &nbsp; <i>print (&#8221; %d \n&#8221;, a+b);</i><br /><br />&nbsp;&nbsp; &nbsp;Well, its not possible in Python. Only logical equality (==) can occur<br />&nbsp;&nbsp; &nbsp;inside an&nbsp;expression.]]></content>
  </entry>
  
</feed>
